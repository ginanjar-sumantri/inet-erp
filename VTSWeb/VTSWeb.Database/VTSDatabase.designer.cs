#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VTSWeb.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="CDC_VTS_Development")]
	public partial class VTSDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMsCity(MsCity instance);
    partial void UpdateMsCity(MsCity instance);
    partial void DeleteMsCity(MsCity instance);
    partial void InsertClearanceAdditionalPhoto(ClearanceAdditionalPhoto instance);
    partial void UpdateClearanceAdditionalPhoto(ClearanceAdditionalPhoto instance);
    partial void DeleteClearanceAdditionalPhoto(ClearanceAdditionalPhoto instance);
    partial void InsertMsArea(MsArea instance);
    partial void UpdateMsArea(MsArea instance);
    partial void DeleteMsArea(MsArea instance);
    partial void InsertMsCountry(MsCountry instance);
    partial void UpdateMsCountry(MsCountry instance);
    partial void DeleteMsCountry(MsCountry instance);
    partial void InsertMsCustContact_MsArea(MsCustContact_MsArea instance);
    partial void UpdateMsCustContact_MsArea(MsCustContact_MsArea instance);
    partial void DeleteMsCustContact_MsArea(MsCustContact_MsArea instance);
    partial void InsertMsCustomer(MsCustomer instance);
    partial void UpdateMsCustomer(MsCustomer instance);
    partial void DeleteMsCustomer(MsCustomer instance);
    partial void InsertMsCustType(MsCustType instance);
    partial void UpdateMsCustType(MsCustType instance);
    partial void DeleteMsCustType(MsCustType instance);
    partial void InsertMsPurpose(MsPurpose instance);
    partial void UpdateMsPurpose(MsPurpose instance);
    partial void DeleteMsPurpose(MsPurpose instance);
    partial void InsertMsRegional(MsRegional instance);
    partial void UpdateMsRegional(MsRegional instance);
    partial void DeleteMsRegional(MsRegional instance);
    partial void InsertMsReligion(MsReligion instance);
    partial void UpdateMsReligion(MsReligion instance);
    partial void DeleteMsReligion(MsReligion instance);
    partial void InsertClearanceHd(ClearanceHd instance);
    partial void UpdateClearanceHd(ClearanceHd instance);
    partial void DeleteClearanceHd(ClearanceHd instance);
    partial void InsertMsMenu(MsMenu instance);
    partial void UpdateMsMenu(MsMenu instance);
    partial void DeleteMsMenu(MsMenu instance);
    partial void InsertMsCustContact(MsCustContact instance);
    partial void UpdateMsCustContact(MsCustContact instance);
    partial void DeleteMsCustContact(MsCustContact instance);
    partial void Insertmaster_CustContactExtension(master_CustContactExtension instance);
    partial void Updatemaster_CustContactExtension(master_CustContactExtension instance);
    partial void Deletemaster_CustContactExtension(master_CustContactExtension instance);
    partial void InsertGoodsInOutDt(GoodsInOutDt instance);
    partial void UpdateGoodsInOutDt(GoodsInOutDt instance);
    partial void DeleteGoodsInOutDt(GoodsInOutDt instance);
    partial void InsertTrGoodList(TrGoodList instance);
    partial void UpdateTrGoodList(TrGoodList instance);
    partial void DeleteTrGoodList(TrGoodList instance);
    partial void InsertMsUser(MsUser instance);
    partial void UpdateMsUser(MsUser instance);
    partial void DeleteMsUser(MsUser instance);
    partial void InsertMsUser_MsEmployee(MsUser_MsEmployee instance);
    partial void UpdateMsUser_MsEmployee(MsUser_MsEmployee instance);
    partial void DeleteMsUser_MsEmployee(MsUser_MsEmployee instance);
    partial void InsertMsEmployee(MsEmployee instance);
    partial void UpdateMsEmployee(MsEmployee instance);
    partial void DeleteMsEmployee(MsEmployee instance);
    partial void InsertMsUserGroup(MsUserGroup instance);
    partial void UpdateMsUserGroup(MsUserGroup instance);
    partial void DeleteMsUserGroup(MsUserGroup instance);
    partial void InsertMsUserGroupDt(MsUserGroupDt instance);
    partial void UpdateMsUserGroupDt(MsUserGroupDt instance);
    partial void DeleteMsUserGroupDt(MsUserGroupDt instance);
    partial void InsertMsAccessPermission(MsAccessPermission instance);
    partial void UpdateMsAccessPermission(MsAccessPermission instance);
    partial void DeleteMsAccessPermission(MsAccessPermission instance);
    partial void InsertMsRackServer(MsRackServer instance);
    partial void UpdateMsRackServer(MsRackServer instance);
    partial void DeleteMsRackServer(MsRackServer instance);
    partial void InsertMsRackBox(MsRackBox instance);
    partial void UpdateMsRackBox(MsRackBox instance);
    partial void DeleteMsRackBox(MsRackBox instance);
    partial void InsertClearanceDt(ClearanceDt instance);
    partial void UpdateClearanceDt(ClearanceDt instance);
    partial void DeleteClearanceDt(ClearanceDt instance);
    partial void InsertGoodsInOutHd(GoodsInOutHd instance);
    partial void UpdateGoodsInOutHd(GoodsInOutHd instance);
    partial void DeleteGoodsInOutHd(GoodsInOutHd instance);
    partial void InsertMsRack_Customer(MsRack_Customer instance);
    partial void UpdateMsRack_Customer(MsRack_Customer instance);
    partial void DeleteMsRack_Customer(MsRack_Customer instance);
    #endregion
		
		public VTSDatabaseDataContext() : 
				base(global::VTSWeb.Database.Properties.Settings.Default.CDC_VTS_DevelopmentConnectionString3, mappingSource)
		{
			OnCreated();
		}
		
		public VTSDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VTSDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VTSDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VTSDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MsCity> MsCities
		{
			get
			{
				return this.GetTable<MsCity>();
			}
		}
		
		public System.Data.Linq.Table<ClearanceAdditionalPhoto> ClearanceAdditionalPhotos
		{
			get
			{
				return this.GetTable<ClearanceAdditionalPhoto>();
			}
		}
		
		public System.Data.Linq.Table<MsArea> MsAreas
		{
			get
			{
				return this.GetTable<MsArea>();
			}
		}
		
		public System.Data.Linq.Table<MsCountry> MsCountries
		{
			get
			{
				return this.GetTable<MsCountry>();
			}
		}
		
		public System.Data.Linq.Table<MsCustContact_MsArea> MsCustContact_MsAreas
		{
			get
			{
				return this.GetTable<MsCustContact_MsArea>();
			}
		}
		
		public System.Data.Linq.Table<MsCustomer> MsCustomers
		{
			get
			{
				return this.GetTable<MsCustomer>();
			}
		}
		
		public System.Data.Linq.Table<MsCustType> MsCustTypes
		{
			get
			{
				return this.GetTable<MsCustType>();
			}
		}
		
		public System.Data.Linq.Table<MsPurpose> MsPurposes
		{
			get
			{
				return this.GetTable<MsPurpose>();
			}
		}
		
		public System.Data.Linq.Table<MsRegional> MsRegionals
		{
			get
			{
				return this.GetTable<MsRegional>();
			}
		}
		
		public System.Data.Linq.Table<MsReligion> MsReligions
		{
			get
			{
				return this.GetTable<MsReligion>();
			}
		}
		
		public System.Data.Linq.Table<ClearanceHd> ClearanceHds
		{
			get
			{
				return this.GetTable<ClearanceHd>();
			}
		}
		
		public System.Data.Linq.Table<MsMenu> MsMenus
		{
			get
			{
				return this.GetTable<MsMenu>();
			}
		}
		
		public System.Data.Linq.Table<MsCustContact> MsCustContacts
		{
			get
			{
				return this.GetTable<MsCustContact>();
			}
		}
		
		public System.Data.Linq.Table<master_CustContactExtension> master_CustContactExtensions
		{
			get
			{
				return this.GetTable<master_CustContactExtension>();
			}
		}
		
		public System.Data.Linq.Table<GoodsInOutDt> GoodsInOutDts
		{
			get
			{
				return this.GetTable<GoodsInOutDt>();
			}
		}
		
		public System.Data.Linq.Table<TrGoodList> TrGoodLists
		{
			get
			{
				return this.GetTable<TrGoodList>();
			}
		}
		
		public System.Data.Linq.Table<MsUser> MsUsers
		{
			get
			{
				return this.GetTable<MsUser>();
			}
		}
		
		public System.Data.Linq.Table<MsUser_MsEmployee> MsUser_MsEmployees
		{
			get
			{
				return this.GetTable<MsUser_MsEmployee>();
			}
		}
		
		public System.Data.Linq.Table<MsEmployee> MsEmployees
		{
			get
			{
				return this.GetTable<MsEmployee>();
			}
		}
		
		public System.Data.Linq.Table<MsUserGroup> MsUserGroups
		{
			get
			{
				return this.GetTable<MsUserGroup>();
			}
		}
		
		public System.Data.Linq.Table<MsUserGroupDt> MsUserGroupDts
		{
			get
			{
				return this.GetTable<MsUserGroupDt>();
			}
		}
		
		public System.Data.Linq.Table<MsAccessPermission> MsAccessPermissions
		{
			get
			{
				return this.GetTable<MsAccessPermission>();
			}
		}
		
		public System.Data.Linq.Table<V_UserPermissionGroup> V_UserPermissionGroups
		{
			get
			{
				return this.GetTable<V_UserPermissionGroup>();
			}
		}
		
		public System.Data.Linq.Table<V_UserPermissionGroup1> V_UserPermissionGroup1s
		{
			get
			{
				return this.GetTable<V_UserPermissionGroup1>();
			}
		}
		
		public System.Data.Linq.Table<MsRackServer> MsRackServers
		{
			get
			{
				return this.GetTable<MsRackServer>();
			}
		}
		
		public System.Data.Linq.Table<MsRackBox> MsRackBoxes
		{
			get
			{
				return this.GetTable<MsRackBox>();
			}
		}
		
		public System.Data.Linq.Table<ClearanceDt> ClearanceDts
		{
			get
			{
				return this.GetTable<ClearanceDt>();
			}
		}
		
		public System.Data.Linq.Table<GoodsInOutHd> GoodsInOutHds
		{
			get
			{
				return this.GetTable<GoodsInOutHd>();
			}
		}
		
		public System.Data.Linq.Table<MsRack_Customer> MsRack_Customers
		{
			get
			{
				return this.GetTable<MsRack_Customer>();
			}
		}
	}
	
	[Table(Name="dbo.MsCity")]
	public partial class MsCity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CityCode;
		
		private string _CityName;
		
		private string _Regional;
		
		private string _Country;
		
		private EntitySet<MsCustomer> _MsCustomers;
		
		private EntityRef<MsCountry> _MsCountry;
		
		private EntityRef<MsRegional> _MsRegional;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityCodeChanging(string value);
    partial void OnCityCodeChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnRegionalChanging(string value);
    partial void OnRegionalChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion
		
		public MsCity()
		{
			this._MsCustomers = new EntitySet<MsCustomer>(new Action<MsCustomer>(this.attach_MsCustomers), new Action<MsCustomer>(this.detach_MsCustomers));
			this._MsCountry = default(EntityRef<MsCountry>);
			this._MsRegional = default(EntityRef<MsRegional>);
			OnCreated();
		}
		
		[Column(Storage="_CityCode", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CityCode
		{
			get
			{
				return this._CityCode;
			}
			set
			{
				if ((this._CityCode != value))
				{
					this.OnCityCodeChanging(value);
					this.SendPropertyChanging();
					this._CityCode = value;
					this.SendPropertyChanged("CityCode");
					this.OnCityCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CityName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[Column(Storage="_Regional", DbType="VarChar(10)")]
		public string Regional
		{
			get
			{
				return this._Regional;
			}
			set
			{
				if ((this._Regional != value))
				{
					if (this._MsRegional.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionalChanging(value);
					this.SendPropertyChanging();
					this._Regional = value;
					this.SendPropertyChanged("Regional");
					this.OnRegionalChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					if (this._MsCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Association(Name="MsCity_MsCustomer", Storage="_MsCustomers", ThisKey="CityCode", OtherKey="City")]
		public EntitySet<MsCustomer> MsCustomers
		{
			get
			{
				return this._MsCustomers;
			}
			set
			{
				this._MsCustomers.Assign(value);
			}
		}
		
		[Association(Name="MsCountry_MsCity", Storage="_MsCountry", ThisKey="Country", OtherKey="CountryCode", IsForeignKey=true)]
		public MsCountry MsCountry
		{
			get
			{
				return this._MsCountry.Entity;
			}
			set
			{
				MsCountry previousValue = this._MsCountry.Entity;
				if (((previousValue != value) 
							|| (this._MsCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsCountry.Entity = null;
						previousValue.MsCities.Remove(this);
					}
					this._MsCountry.Entity = value;
					if ((value != null))
					{
						value.MsCities.Add(this);
						this._Country = value.CountryCode;
					}
					else
					{
						this._Country = default(string);
					}
					this.SendPropertyChanged("MsCountry");
				}
			}
		}
		
		[Association(Name="MsRegional_MsCity", Storage="_MsRegional", ThisKey="Regional", OtherKey="RegionalCode", IsForeignKey=true)]
		public MsRegional MsRegional
		{
			get
			{
				return this._MsRegional.Entity;
			}
			set
			{
				MsRegional previousValue = this._MsRegional.Entity;
				if (((previousValue != value) 
							|| (this._MsRegional.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsRegional.Entity = null;
						previousValue.MsCities.Remove(this);
					}
					this._MsRegional.Entity = value;
					if ((value != null))
					{
						value.MsCities.Add(this);
						this._Regional = value.RegionalCode;
					}
					else
					{
						this._Regional = default(string);
					}
					this.SendPropertyChanged("MsRegional");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MsCustomers(MsCustomer entity)
		{
			this.SendPropertyChanging();
			entity.MsCity = this;
		}
		
		private void detach_MsCustomers(MsCustomer entity)
		{
			this.SendPropertyChanging();
			entity.MsCity = null;
		}
	}
	
	[Table(Name="dbo.ClearanceAdditionalPhoto")]
	public partial class ClearanceAdditionalPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ClearanceAdditionalCode;
		
		private string _ClearanceCode;
		
		private System.Data.Linq.Binary _Photo;
		
		private EntityRef<ClearanceHd> _ClearanceHd;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClearanceAdditionalCodeChanging(System.Guid value);
    partial void OnClearanceAdditionalCodeChanged();
    partial void OnClearanceCodeChanging(string value);
    partial void OnClearanceCodeChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    #endregion
		
		public ClearanceAdditionalPhoto()
		{
			this._ClearanceHd = default(EntityRef<ClearanceHd>);
			OnCreated();
		}
		
		[Column(Storage="_ClearanceAdditionalCode", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ClearanceAdditionalCode
		{
			get
			{
				return this._ClearanceAdditionalCode;
			}
			set
			{
				if ((this._ClearanceAdditionalCode != value))
				{
					this.OnClearanceAdditionalCodeChanging(value);
					this.SendPropertyChanging();
					this._ClearanceAdditionalCode = value;
					this.SendPropertyChanged("ClearanceAdditionalCode");
					this.OnClearanceAdditionalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ClearanceCode", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string ClearanceCode
		{
			get
			{
				return this._ClearanceCode;
			}
			set
			{
				if ((this._ClearanceCode != value))
				{
					if (this._ClearanceHd.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClearanceCodeChanging(value);
					this.SendPropertyChanging();
					this._ClearanceCode = value;
					this.SendPropertyChanged("ClearanceCode");
					this.OnClearanceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[Association(Name="ClearanceHd_ClearanceAdditionalPhoto", Storage="_ClearanceHd", ThisKey="ClearanceCode", OtherKey="ClearanceCode", IsForeignKey=true)]
		public ClearanceHd ClearanceHd
		{
			get
			{
				return this._ClearanceHd.Entity;
			}
			set
			{
				ClearanceHd previousValue = this._ClearanceHd.Entity;
				if (((previousValue != value) 
							|| (this._ClearanceHd.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClearanceHd.Entity = null;
						previousValue.ClearanceAdditionalPhotos.Remove(this);
					}
					this._ClearanceHd.Entity = value;
					if ((value != null))
					{
						value.ClearanceAdditionalPhotos.Add(this);
						this._ClearanceCode = value.ClearanceCode;
					}
					else
					{
						this._ClearanceCode = default(string);
					}
					this.SendPropertyChanged("ClearanceHd");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsArea")]
	public partial class MsArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AreaCode;
		
		private string _AreaName;
		
		private string _Remark;
		
		private EntitySet<MsCustContact_MsArea> _MsCustContact_MsAreas;
		
		private EntitySet<ClearanceDt> _ClearanceDts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAreaCodeChanging(string value);
    partial void OnAreaCodeChanged();
    partial void OnAreaNameChanging(string value);
    partial void OnAreaNameChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public MsArea()
		{
			this._MsCustContact_MsAreas = new EntitySet<MsCustContact_MsArea>(new Action<MsCustContact_MsArea>(this.attach_MsCustContact_MsAreas), new Action<MsCustContact_MsArea>(this.detach_MsCustContact_MsAreas));
			this._ClearanceDts = new EntitySet<ClearanceDt>(new Action<ClearanceDt>(this.attach_ClearanceDts), new Action<ClearanceDt>(this.detach_ClearanceDts));
			OnCreated();
		}
		
		[Column(Storage="_AreaCode", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AreaName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string AreaName
		{
			get
			{
				return this._AreaName;
			}
			set
			{
				if ((this._AreaName != value))
				{
					this.OnAreaNameChanging(value);
					this.SendPropertyChanging();
					this._AreaName = value;
					this.SendPropertyChanged("AreaName");
					this.OnAreaNameChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(60)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="MsArea_MsCustContact_MsArea", Storage="_MsCustContact_MsAreas", ThisKey="AreaCode", OtherKey="AreaCode")]
		public EntitySet<MsCustContact_MsArea> MsCustContact_MsAreas
		{
			get
			{
				return this._MsCustContact_MsAreas;
			}
			set
			{
				this._MsCustContact_MsAreas.Assign(value);
			}
		}
		
		[Association(Name="MsArea_ClearanceDt", Storage="_ClearanceDts", ThisKey="AreaCode", OtherKey="AreaCode")]
		public EntitySet<ClearanceDt> ClearanceDts
		{
			get
			{
				return this._ClearanceDts;
			}
			set
			{
				this._ClearanceDts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MsCustContact_MsAreas(MsCustContact_MsArea entity)
		{
			this.SendPropertyChanging();
			entity.MsArea = this;
		}
		
		private void detach_MsCustContact_MsAreas(MsCustContact_MsArea entity)
		{
			this.SendPropertyChanging();
			entity.MsArea = null;
		}
		
		private void attach_ClearanceDts(ClearanceDt entity)
		{
			this.SendPropertyChanging();
			entity.MsArea = this;
		}
		
		private void detach_ClearanceDts(ClearanceDt entity)
		{
			this.SendPropertyChanging();
			entity.MsArea = null;
		}
	}
	
	[Table(Name="dbo.MsCountry")]
	public partial class MsCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CountryCode;
		
		private string _CountryName;
		
		private EntitySet<MsCity> _MsCities;
		
		private EntitySet<MsCustContact> _MsCustContacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public MsCountry()
		{
			this._MsCities = new EntitySet<MsCity>(new Action<MsCity>(this.attach_MsCities), new Action<MsCity>(this.detach_MsCities));
			this._MsCustContacts = new EntitySet<MsCustContact>(new Action<MsCustContact>(this.attach_MsCustContacts), new Action<MsCustContact>(this.detach_MsCustContacts));
			OnCreated();
		}
		
		[Column(Storage="_CountryCode", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[Association(Name="MsCountry_MsCity", Storage="_MsCities", ThisKey="CountryCode", OtherKey="Country")]
		public EntitySet<MsCity> MsCities
		{
			get
			{
				return this._MsCities;
			}
			set
			{
				this._MsCities.Assign(value);
			}
		}
		
		[Association(Name="MsCountry_MsCustContact", Storage="_MsCustContacts", ThisKey="CountryCode", OtherKey="Country")]
		public EntitySet<MsCustContact> MsCustContacts
		{
			get
			{
				return this._MsCustContacts;
			}
			set
			{
				this._MsCustContacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MsCities(MsCity entity)
		{
			this.SendPropertyChanging();
			entity.MsCountry = this;
		}
		
		private void detach_MsCities(MsCity entity)
		{
			this.SendPropertyChanging();
			entity.MsCountry = null;
		}
		
		private void attach_MsCustContacts(MsCustContact entity)
		{
			this.SendPropertyChanging();
			entity.MsCountry = this;
		}
		
		private void detach_MsCustContacts(MsCustContact entity)
		{
			this.SendPropertyChanging();
			entity.MsCountry = null;
		}
	}
	
	[Table(Name="dbo.MsCustContact_MsArea")]
	public partial class MsCustContact_MsArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _VisitorAreaCode;
		
		private string _CustCode;
		
		private int _ItemNo;
		
		private string _AreaCode;
		
		private EntityRef<MsArea> _MsArea;
		
		private EntityRef<MsCustContact> _MsCustContact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitorAreaCodeChanging(System.Guid value);
    partial void OnVisitorAreaCodeChanged();
    partial void OnCustCodeChanging(string value);
    partial void OnCustCodeChanged();
    partial void OnItemNoChanging(int value);
    partial void OnItemNoChanged();
    partial void OnAreaCodeChanging(string value);
    partial void OnAreaCodeChanged();
    #endregion
		
		public MsCustContact_MsArea()
		{
			this._MsArea = default(EntityRef<MsArea>);
			this._MsCustContact = default(EntityRef<MsCustContact>);
			OnCreated();
		}
		
		[Column(Storage="_VisitorAreaCode", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid VisitorAreaCode
		{
			get
			{
				return this._VisitorAreaCode;
			}
			set
			{
				if ((this._VisitorAreaCode != value))
				{
					this.OnVisitorAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._VisitorAreaCode = value;
					this.SendPropertyChanged("VisitorAreaCode");
					this.OnVisitorAreaCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CustCode", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string CustCode
		{
			get
			{
				return this._CustCode;
			}
			set
			{
				if ((this._CustCode != value))
				{
					if (this._MsCustContact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustCodeChanging(value);
					this.SendPropertyChanging();
					this._CustCode = value;
					this.SendPropertyChanged("CustCode");
					this.OnCustCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ItemNo", DbType="Int NOT NULL")]
		public int ItemNo
		{
			get
			{
				return this._ItemNo;
			}
			set
			{
				if ((this._ItemNo != value))
				{
					if (this._MsCustContact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemNoChanging(value);
					this.SendPropertyChanging();
					this._ItemNo = value;
					this.SendPropertyChanged("ItemNo");
					this.OnItemNoChanged();
				}
			}
		}
		
		[Column(Storage="_AreaCode", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					if (this._MsArea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[Association(Name="MsArea_MsCustContact_MsArea", Storage="_MsArea", ThisKey="AreaCode", OtherKey="AreaCode", IsForeignKey=true)]
		public MsArea MsArea
		{
			get
			{
				return this._MsArea.Entity;
			}
			set
			{
				MsArea previousValue = this._MsArea.Entity;
				if (((previousValue != value) 
							|| (this._MsArea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsArea.Entity = null;
						previousValue.MsCustContact_MsAreas.Remove(this);
					}
					this._MsArea.Entity = value;
					if ((value != null))
					{
						value.MsCustContact_MsAreas.Add(this);
						this._AreaCode = value.AreaCode;
					}
					else
					{
						this._AreaCode = default(string);
					}
					this.SendPropertyChanged("MsArea");
				}
			}
		}
		
		[Association(Name="MsCustContact_MsCustContact_MsArea", Storage="_MsCustContact", ThisKey="CustCode,ItemNo", OtherKey="CustCode,ItemNo", IsForeignKey=true)]
		public MsCustContact MsCustContact
		{
			get
			{
				return this._MsCustContact.Entity;
			}
			set
			{
				MsCustContact previousValue = this._MsCustContact.Entity;
				if (((previousValue != value) 
							|| (this._MsCustContact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsCustContact.Entity = null;
						previousValue.MsCustContact_MsAreas.Remove(this);
					}
					this._MsCustContact.Entity = value;
					if ((value != null))
					{
						value.MsCustContact_MsAreas.Add(this);
						this._CustCode = value.CustCode;
						this._ItemNo = value.ItemNo;
					}
					else
					{
						this._CustCode = default(string);
						this._ItemNo = default(int);
					}
					this.SendPropertyChanged("MsCustContact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsCustomer")]
	public partial class MsCustomer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CustCode;
		
		private string _CustName;
		
		private string _CustType;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _ZipCode;
		
		private string _City;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _ContactName;
		
		private string _ContactTitle;
		
		private string _ContactHP;
		
		private string _ContactEmail;
		
		private char _FgActive;
		
		private EntitySet<ClearanceHd> _ClearanceHds;
		
		private EntitySet<MsCustContact> _MsCustContacts;
		
		private EntitySet<MsRack_Customer> _MsRack_Customers;
		
		private EntityRef<MsCity> _MsCity;
		
		private EntityRef<MsCustType> _MsCustType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustCodeChanging(string value);
    partial void OnCustCodeChanged();
    partial void OnCustNameChanging(string value);
    partial void OnCustNameChanged();
    partial void OnCustTypeChanging(string value);
    partial void OnCustTypeChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnContactTitleChanging(string value);
    partial void OnContactTitleChanged();
    partial void OnContactHPChanging(string value);
    partial void OnContactHPChanged();
    partial void OnContactEmailChanging(string value);
    partial void OnContactEmailChanged();
    partial void OnFgActiveChanging(char value);
    partial void OnFgActiveChanged();
    #endregion
		
		public MsCustomer()
		{
			this._ClearanceHds = new EntitySet<ClearanceHd>(new Action<ClearanceHd>(this.attach_ClearanceHds), new Action<ClearanceHd>(this.detach_ClearanceHds));
			this._MsCustContacts = new EntitySet<MsCustContact>(new Action<MsCustContact>(this.attach_MsCustContacts), new Action<MsCustContact>(this.detach_MsCustContacts));
			this._MsRack_Customers = new EntitySet<MsRack_Customer>(new Action<MsRack_Customer>(this.attach_MsRack_Customers), new Action<MsRack_Customer>(this.detach_MsRack_Customers));
			this._MsCity = default(EntityRef<MsCity>);
			this._MsCustType = default(EntityRef<MsCustType>);
			OnCreated();
		}
		
		[Column(Storage="_CustCode", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CustCode
		{
			get
			{
				return this._CustCode;
			}
			set
			{
				if ((this._CustCode != value))
				{
					this.OnCustCodeChanging(value);
					this.SendPropertyChanging();
					this._CustCode = value;
					this.SendPropertyChanged("CustCode");
					this.OnCustCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CustName", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string CustName
		{
			get
			{
				return this._CustName;
			}
			set
			{
				if ((this._CustName != value))
				{
					this.OnCustNameChanging(value);
					this.SendPropertyChanging();
					this._CustName = value;
					this.SendPropertyChanged("CustName");
					this.OnCustNameChanged();
				}
			}
		}
		
		[Column(Storage="_CustType", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string CustType
		{
			get
			{
				return this._CustType;
			}
			set
			{
				if ((this._CustType != value))
				{
					if (this._MsCustType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustTypeChanging(value);
					this.SendPropertyChanging();
					this._CustType = value;
					this.SendPropertyChanged("CustType");
					this.OnCustTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Address1", DbType="VarChar(5000)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[Column(Storage="_Address2", DbType="VarChar(5000)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[Column(Storage="_ZipCode", DbType="VarChar(10)")]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					if (this._MsCity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(30)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="VarChar(30)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(40)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_ContactName", DbType="VarChar(40)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[Column(Storage="_ContactTitle", DbType="VarChar(30)")]
		public string ContactTitle
		{
			get
			{
				return this._ContactTitle;
			}
			set
			{
				if ((this._ContactTitle != value))
				{
					this.OnContactTitleChanging(value);
					this.SendPropertyChanging();
					this._ContactTitle = value;
					this.SendPropertyChanged("ContactTitle");
					this.OnContactTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ContactHP", DbType="VarChar(30)")]
		public string ContactHP
		{
			get
			{
				return this._ContactHP;
			}
			set
			{
				if ((this._ContactHP != value))
				{
					this.OnContactHPChanging(value);
					this.SendPropertyChanging();
					this._ContactHP = value;
					this.SendPropertyChanged("ContactHP");
					this.OnContactHPChanged();
				}
			}
		}
		
		[Column(Storage="_ContactEmail", DbType="VarChar(40)")]
		public string ContactEmail
		{
			get
			{
				return this._ContactEmail;
			}
			set
			{
				if ((this._ContactEmail != value))
				{
					this.OnContactEmailChanging(value);
					this.SendPropertyChanging();
					this._ContactEmail = value;
					this.SendPropertyChanged("ContactEmail");
					this.OnContactEmailChanged();
				}
			}
		}
		
		[Column(Storage="_FgActive", DbType="VarChar(1) NOT NULL")]
		public char FgActive
		{
			get
			{
				return this._FgActive;
			}
			set
			{
				if ((this._FgActive != value))
				{
					this.OnFgActiveChanging(value);
					this.SendPropertyChanging();
					this._FgActive = value;
					this.SendPropertyChanged("FgActive");
					this.OnFgActiveChanged();
				}
			}
		}
		
		[Association(Name="MsCustomer_ClearanceHd", Storage="_ClearanceHds", ThisKey="CustCode", OtherKey="CustomerCode")]
		public EntitySet<ClearanceHd> ClearanceHds
		{
			get
			{
				return this._ClearanceHds;
			}
			set
			{
				this._ClearanceHds.Assign(value);
			}
		}
		
		[Association(Name="MsCustomer_MsCustContact", Storage="_MsCustContacts", ThisKey="CustCode", OtherKey="CustCode")]
		public EntitySet<MsCustContact> MsCustContacts
		{
			get
			{
				return this._MsCustContacts;
			}
			set
			{
				this._MsCustContacts.Assign(value);
			}
		}
		
		[Association(Name="MsCustomer_MsRack_Customer", Storage="_MsRack_Customers", ThisKey="CustCode", OtherKey="CustCode")]
		public EntitySet<MsRack_Customer> MsRack_Customers
		{
			get
			{
				return this._MsRack_Customers;
			}
			set
			{
				this._MsRack_Customers.Assign(value);
			}
		}
		
		[Association(Name="MsCity_MsCustomer", Storage="_MsCity", ThisKey="City", OtherKey="CityCode", IsForeignKey=true)]
		public MsCity MsCity
		{
			get
			{
				return this._MsCity.Entity;
			}
			set
			{
				MsCity previousValue = this._MsCity.Entity;
				if (((previousValue != value) 
							|| (this._MsCity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsCity.Entity = null;
						previousValue.MsCustomers.Remove(this);
					}
					this._MsCity.Entity = value;
					if ((value != null))
					{
						value.MsCustomers.Add(this);
						this._City = value.CityCode;
					}
					else
					{
						this._City = default(string);
					}
					this.SendPropertyChanged("MsCity");
				}
			}
		}
		
		[Association(Name="MsCustType_MsCustomer", Storage="_MsCustType", ThisKey="CustType", OtherKey="CustTypeCode", IsForeignKey=true)]
		public MsCustType MsCustType
		{
			get
			{
				return this._MsCustType.Entity;
			}
			set
			{
				MsCustType previousValue = this._MsCustType.Entity;
				if (((previousValue != value) 
							|| (this._MsCustType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsCustType.Entity = null;
						previousValue.MsCustomers.Remove(this);
					}
					this._MsCustType.Entity = value;
					if ((value != null))
					{
						value.MsCustomers.Add(this);
						this._CustType = value.CustTypeCode;
					}
					else
					{
						this._CustType = default(string);
					}
					this.SendPropertyChanged("MsCustType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClearanceHds(ClearanceHd entity)
		{
			this.SendPropertyChanging();
			entity.MsCustomer = this;
		}
		
		private void detach_ClearanceHds(ClearanceHd entity)
		{
			this.SendPropertyChanging();
			entity.MsCustomer = null;
		}
		
		private void attach_MsCustContacts(MsCustContact entity)
		{
			this.SendPropertyChanging();
			entity.MsCustomer = this;
		}
		
		private void detach_MsCustContacts(MsCustContact entity)
		{
			this.SendPropertyChanging();
			entity.MsCustomer = null;
		}
		
		private void attach_MsRack_Customers(MsRack_Customer entity)
		{
			this.SendPropertyChanging();
			entity.MsCustomer = this;
		}
		
		private void detach_MsRack_Customers(MsRack_Customer entity)
		{
			this.SendPropertyChanging();
			entity.MsCustomer = null;
		}
	}
	
	[Table(Name="dbo.MsCustType")]
	public partial class MsCustType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CustTypeCode;
		
		private string _CustTypeName;
		
		private EntitySet<MsCustomer> _MsCustomers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustTypeCodeChanging(string value);
    partial void OnCustTypeCodeChanged();
    partial void OnCustTypeNameChanging(string value);
    partial void OnCustTypeNameChanged();
    #endregion
		
		public MsCustType()
		{
			this._MsCustomers = new EntitySet<MsCustomer>(new Action<MsCustomer>(this.attach_MsCustomers), new Action<MsCustomer>(this.detach_MsCustomers));
			OnCreated();
		}
		
		[Column(Storage="_CustTypeCode", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CustTypeCode
		{
			get
			{
				return this._CustTypeCode;
			}
			set
			{
				if ((this._CustTypeCode != value))
				{
					this.OnCustTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._CustTypeCode = value;
					this.SendPropertyChanged("CustTypeCode");
					this.OnCustTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CustTypeName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string CustTypeName
		{
			get
			{
				return this._CustTypeName;
			}
			set
			{
				if ((this._CustTypeName != value))
				{
					this.OnCustTypeNameChanging(value);
					this.SendPropertyChanging();
					this._CustTypeName = value;
					this.SendPropertyChanged("CustTypeName");
					this.OnCustTypeNameChanged();
				}
			}
		}
		
		[Association(Name="MsCustType_MsCustomer", Storage="_MsCustomers", ThisKey="CustTypeCode", OtherKey="CustType")]
		public EntitySet<MsCustomer> MsCustomers
		{
			get
			{
				return this._MsCustomers;
			}
			set
			{
				this._MsCustomers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MsCustomers(MsCustomer entity)
		{
			this.SendPropertyChanging();
			entity.MsCustType = this;
		}
		
		private void detach_MsCustomers(MsCustomer entity)
		{
			this.SendPropertyChanging();
			entity.MsCustType = null;
		}
	}
	
	[Table(Name="dbo.MsPurpose")]
	public partial class MsPurpose : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PurposeCode;
		
		private string _PurposeName;
		
		private string _Remark;
		
		private EntitySet<ClearanceDt> _ClearanceDts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurposeCodeChanging(string value);
    partial void OnPurposeCodeChanged();
    partial void OnPurposeNameChanging(string value);
    partial void OnPurposeNameChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public MsPurpose()
		{
			this._ClearanceDts = new EntitySet<ClearanceDt>(new Action<ClearanceDt>(this.attach_ClearanceDts), new Action<ClearanceDt>(this.detach_ClearanceDts));
			OnCreated();
		}
		
		[Column(Storage="_PurposeCode", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PurposeCode
		{
			get
			{
				return this._PurposeCode;
			}
			set
			{
				if ((this._PurposeCode != value))
				{
					this.OnPurposeCodeChanging(value);
					this.SendPropertyChanging();
					this._PurposeCode = value;
					this.SendPropertyChanged("PurposeCode");
					this.OnPurposeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PurposeName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string PurposeName
		{
			get
			{
				return this._PurposeName;
			}
			set
			{
				if ((this._PurposeName != value))
				{
					this.OnPurposeNameChanging(value);
					this.SendPropertyChanging();
					this._PurposeName = value;
					this.SendPropertyChanged("PurposeName");
					this.OnPurposeNameChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(60)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="MsPurpose_ClearanceDt", Storage="_ClearanceDts", ThisKey="PurposeCode", OtherKey="PurposeCode")]
		public EntitySet<ClearanceDt> ClearanceDts
		{
			get
			{
				return this._ClearanceDts;
			}
			set
			{
				this._ClearanceDts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClearanceDts(ClearanceDt entity)
		{
			this.SendPropertyChanging();
			entity.MsPurpose = this;
		}
		
		private void detach_ClearanceDts(ClearanceDt entity)
		{
			this.SendPropertyChanging();
			entity.MsPurpose = null;
		}
	}
	
	[Table(Name="dbo.MsRegional")]
	public partial class MsRegional : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RegionalCode;
		
		private string _RegionalName;
		
		private EntitySet<MsCity> _MsCities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegionalCodeChanging(string value);
    partial void OnRegionalCodeChanged();
    partial void OnRegionalNameChanging(string value);
    partial void OnRegionalNameChanged();
    #endregion
		
		public MsRegional()
		{
			this._MsCities = new EntitySet<MsCity>(new Action<MsCity>(this.attach_MsCities), new Action<MsCity>(this.detach_MsCities));
			OnCreated();
		}
		
		[Column(Storage="_RegionalCode", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RegionalCode
		{
			get
			{
				return this._RegionalCode;
			}
			set
			{
				if ((this._RegionalCode != value))
				{
					this.OnRegionalCodeChanging(value);
					this.SendPropertyChanging();
					this._RegionalCode = value;
					this.SendPropertyChanged("RegionalCode");
					this.OnRegionalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_RegionalName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string RegionalName
		{
			get
			{
				return this._RegionalName;
			}
			set
			{
				if ((this._RegionalName != value))
				{
					this.OnRegionalNameChanging(value);
					this.SendPropertyChanging();
					this._RegionalName = value;
					this.SendPropertyChanged("RegionalName");
					this.OnRegionalNameChanged();
				}
			}
		}
		
		[Association(Name="MsRegional_MsCity", Storage="_MsCities", ThisKey="RegionalCode", OtherKey="Regional")]
		public EntitySet<MsCity> MsCities
		{
			get
			{
				return this._MsCities;
			}
			set
			{
				this._MsCities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MsCities(MsCity entity)
		{
			this.SendPropertyChanging();
			entity.MsRegional = this;
		}
		
		private void detach_MsCities(MsCity entity)
		{
			this.SendPropertyChanging();
			entity.MsRegional = null;
		}
	}
	
	[Table(Name="dbo.MsReligion")]
	public partial class MsReligion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ReligionCode;
		
		private string _ReligionName;
		
		private EntitySet<MsCustContact> _MsCustContacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReligionCodeChanging(string value);
    partial void OnReligionCodeChanged();
    partial void OnReligionNameChanging(string value);
    partial void OnReligionNameChanged();
    #endregion
		
		public MsReligion()
		{
			this._MsCustContacts = new EntitySet<MsCustContact>(new Action<MsCustContact>(this.attach_MsCustContacts), new Action<MsCustContact>(this.detach_MsCustContacts));
			OnCreated();
		}
		
		[Column(Storage="_ReligionCode", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ReligionCode
		{
			get
			{
				return this._ReligionCode;
			}
			set
			{
				if ((this._ReligionCode != value))
				{
					this.OnReligionCodeChanging(value);
					this.SendPropertyChanging();
					this._ReligionCode = value;
					this.SendPropertyChanged("ReligionCode");
					this.OnReligionCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ReligionName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ReligionName
		{
			get
			{
				return this._ReligionName;
			}
			set
			{
				if ((this._ReligionName != value))
				{
					this.OnReligionNameChanging(value);
					this.SendPropertyChanging();
					this._ReligionName = value;
					this.SendPropertyChanged("ReligionName");
					this.OnReligionNameChanged();
				}
			}
		}
		
		[Association(Name="MsReligion_MsCustContact", Storage="_MsCustContacts", ThisKey="ReligionCode", OtherKey="Religion")]
		public EntitySet<MsCustContact> MsCustContacts
		{
			get
			{
				return this._MsCustContacts;
			}
			set
			{
				this._MsCustContacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MsCustContacts(MsCustContact entity)
		{
			this.SendPropertyChanging();
			entity.MsReligion = this;
		}
		
		private void detach_MsCustContacts(MsCustContact entity)
		{
			this.SendPropertyChanging();
			entity.MsReligion = null;
		}
	}
	
	[Table(Name="dbo.ClearanceHd")]
	public partial class ClearanceHd : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClearanceCode;
		
		private System.DateTime _ClearanceDate;
		
		private string _CustomerCode;
		
		private int _VisitorCode;
		
		private string _Remark;
		
		private byte _CompleteStatus;
		
		private System.Data.Linq.Binary _VisitorImage;
		
		private EntitySet<ClearanceAdditionalPhoto> _ClearanceAdditionalPhotos;
		
		private EntitySet<ClearanceDt> _ClearanceDts;
		
		private EntityRef<MsCustomer> _MsCustomer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClearanceCodeChanging(string value);
    partial void OnClearanceCodeChanged();
    partial void OnClearanceDateChanging(System.DateTime value);
    partial void OnClearanceDateChanged();
    partial void OnCustomerCodeChanging(string value);
    partial void OnCustomerCodeChanged();
    partial void OnVisitorCodeChanging(int value);
    partial void OnVisitorCodeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCompleteStatusChanging(byte value);
    partial void OnCompleteStatusChanged();
    partial void OnVisitorImageChanging(System.Data.Linq.Binary value);
    partial void OnVisitorImageChanged();
    #endregion
		
		public ClearanceHd()
		{
			this._ClearanceAdditionalPhotos = new EntitySet<ClearanceAdditionalPhoto>(new Action<ClearanceAdditionalPhoto>(this.attach_ClearanceAdditionalPhotos), new Action<ClearanceAdditionalPhoto>(this.detach_ClearanceAdditionalPhotos));
			this._ClearanceDts = new EntitySet<ClearanceDt>(new Action<ClearanceDt>(this.attach_ClearanceDts), new Action<ClearanceDt>(this.detach_ClearanceDts));
			this._MsCustomer = default(EntityRef<MsCustomer>);
			OnCreated();
		}
		
		[Column(Storage="_ClearanceCode", DbType="VarChar(14) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClearanceCode
		{
			get
			{
				return this._ClearanceCode;
			}
			set
			{
				if ((this._ClearanceCode != value))
				{
					this.OnClearanceCodeChanging(value);
					this.SendPropertyChanging();
					this._ClearanceCode = value;
					this.SendPropertyChanged("ClearanceCode");
					this.OnClearanceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ClearanceDate", DbType="DateTime NOT NULL")]
		public System.DateTime ClearanceDate
		{
			get
			{
				return this._ClearanceDate;
			}
			set
			{
				if ((this._ClearanceDate != value))
				{
					this.OnClearanceDateChanging(value);
					this.SendPropertyChanging();
					this._ClearanceDate = value;
					this.SendPropertyChanged("ClearanceDate");
					this.OnClearanceDateChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerCode", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string CustomerCode
		{
			get
			{
				return this._CustomerCode;
			}
			set
			{
				if ((this._CustomerCode != value))
				{
					if (this._MsCustomer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerCodeChanging(value);
					this.SendPropertyChanging();
					this._CustomerCode = value;
					this.SendPropertyChanged("CustomerCode");
					this.OnCustomerCodeChanged();
				}
			}
		}
		
		[Column(Storage="_VisitorCode", DbType="Int NOT NULL")]
		public int VisitorCode
		{
			get
			{
				return this._VisitorCode;
			}
			set
			{
				if ((this._VisitorCode != value))
				{
					this.OnVisitorCodeChanging(value);
					this.SendPropertyChanging();
					this._VisitorCode = value;
					this.SendPropertyChanged("VisitorCode");
					this.OnVisitorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(60)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CompleteStatus", DbType="TinyInt NOT NULL")]
		public byte CompleteStatus
		{
			get
			{
				return this._CompleteStatus;
			}
			set
			{
				if ((this._CompleteStatus != value))
				{
					this.OnCompleteStatusChanging(value);
					this.SendPropertyChanging();
					this._CompleteStatus = value;
					this.SendPropertyChanged("CompleteStatus");
					this.OnCompleteStatusChanged();
				}
			}
		}
		
		[Column(Storage="_VisitorImage", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VisitorImage
		{
			get
			{
				return this._VisitorImage;
			}
			set
			{
				if ((this._VisitorImage != value))
				{
					this.OnVisitorImageChanging(value);
					this.SendPropertyChanging();
					this._VisitorImage = value;
					this.SendPropertyChanged("VisitorImage");
					this.OnVisitorImageChanged();
				}
			}
		}
		
		[Association(Name="ClearanceHd_ClearanceAdditionalPhoto", Storage="_ClearanceAdditionalPhotos", ThisKey="ClearanceCode", OtherKey="ClearanceCode")]
		public EntitySet<ClearanceAdditionalPhoto> ClearanceAdditionalPhotos
		{
			get
			{
				return this._ClearanceAdditionalPhotos;
			}
			set
			{
				this._ClearanceAdditionalPhotos.Assign(value);
			}
		}
		
		[Association(Name="ClearanceHd_ClearanceDt", Storage="_ClearanceDts", ThisKey="ClearanceCode", OtherKey="ClearanceCode")]
		public EntitySet<ClearanceDt> ClearanceDts
		{
			get
			{
				return this._ClearanceDts;
			}
			set
			{
				this._ClearanceDts.Assign(value);
			}
		}
		
		[Association(Name="MsCustomer_ClearanceHd", Storage="_MsCustomer", ThisKey="CustomerCode", OtherKey="CustCode", IsForeignKey=true)]
		public MsCustomer MsCustomer
		{
			get
			{
				return this._MsCustomer.Entity;
			}
			set
			{
				MsCustomer previousValue = this._MsCustomer.Entity;
				if (((previousValue != value) 
							|| (this._MsCustomer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsCustomer.Entity = null;
						previousValue.ClearanceHds.Remove(this);
					}
					this._MsCustomer.Entity = value;
					if ((value != null))
					{
						value.ClearanceHds.Add(this);
						this._CustomerCode = value.CustCode;
					}
					else
					{
						this._CustomerCode = default(string);
					}
					this.SendPropertyChanged("MsCustomer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClearanceAdditionalPhotos(ClearanceAdditionalPhoto entity)
		{
			this.SendPropertyChanging();
			entity.ClearanceHd = this;
		}
		
		private void detach_ClearanceAdditionalPhotos(ClearanceAdditionalPhoto entity)
		{
			this.SendPropertyChanging();
			entity.ClearanceHd = null;
		}
		
		private void attach_ClearanceDts(ClearanceDt entity)
		{
			this.SendPropertyChanging();
			entity.ClearanceHd = this;
		}
		
		private void detach_ClearanceDts(ClearanceDt entity)
		{
			this.SendPropertyChanging();
			entity.ClearanceHd = null;
		}
	}
	
	[Table(Name="dbo.MsMenu")]
	public partial class MsMenu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MenuID;
		
		private string _Text;
		
		private int _ParentID;
		
		private string _NavigateURL;
		
		private System.Nullable<int> _PermisionLevel;
		
		private System.Nullable<int> _Priority;
		
		private System.Nullable<byte> _indent;
		
		private System.Nullable<bool> _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuIDChanging(int value);
    partial void OnMenuIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnNavigateURLChanging(string value);
    partial void OnNavigateURLChanged();
    partial void OnPermisionLevelChanging(System.Nullable<int> value);
    partial void OnPermisionLevelChanged();
    partial void OnPriorityChanging(System.Nullable<int> value);
    partial void OnPriorityChanged();
    partial void OnindentChanging(System.Nullable<byte> value);
    partial void OnindentChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public MsMenu()
		{
			OnCreated();
		}
		
		[Column(Storage="_MenuID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="VarChar(50)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="Int NOT NULL")]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_NavigateURL", DbType="VarChar(500)")]
		public string NavigateURL
		{
			get
			{
				return this._NavigateURL;
			}
			set
			{
				if ((this._NavigateURL != value))
				{
					this.OnNavigateURLChanging(value);
					this.SendPropertyChanging();
					this._NavigateURL = value;
					this.SendPropertyChanged("NavigateURL");
					this.OnNavigateURLChanged();
				}
			}
		}
		
		[Column(Storage="_PermisionLevel", DbType="Int")]
		public System.Nullable<int> PermisionLevel
		{
			get
			{
				return this._PermisionLevel;
			}
			set
			{
				if ((this._PermisionLevel != value))
				{
					this.OnPermisionLevelChanging(value);
					this.SendPropertyChanging();
					this._PermisionLevel = value;
					this.SendPropertyChanged("PermisionLevel");
					this.OnPermisionLevelChanged();
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="Int")]
		public System.Nullable<int> Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[Column(Storage="_indent", DbType="TinyInt")]
		public System.Nullable<byte> indent
		{
			get
			{
				return this._indent;
			}
			set
			{
				if ((this._indent != value))
				{
					this.OnindentChanging(value);
					this.SendPropertyChanging();
					this._indent = value;
					this.SendPropertyChanged("indent");
					this.OnindentChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsCustContact")]
	public partial class MsCustContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CustCode;
		
		private int _ItemNo;
		
		private string _ContactType;
		
		private string _ContactName;
		
		private string _ContactTitle;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private string _Religion;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Country;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _Remark;
		
		private System.Nullable<char> _FgAccess;
		
		private System.Nullable<char> _FgGoodsIn;
		
		private System.Nullable<char> _FgGoodsOut;
		
		private System.Nullable<char> _FgAdditionalVisitor;
		
		private System.Nullable<char> _FgAuthorizationContact;
		
		private string _CardID;
		
		private EntitySet<MsCustContact_MsArea> _MsCustContact_MsAreas;
		
		private EntityRef<master_CustContactExtension> _master_CustContactExtension;
		
		private EntityRef<MsCountry> _MsCountry;
		
		private EntityRef<MsCustomer> _MsCustomer;
		
		private EntityRef<MsReligion> _MsReligion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustCodeChanging(string value);
    partial void OnCustCodeChanged();
    partial void OnItemNoChanging(int value);
    partial void OnItemNoChanged();
    partial void OnContactTypeChanging(string value);
    partial void OnContactTypeChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnContactTitleChanging(string value);
    partial void OnContactTitleChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnReligionChanging(string value);
    partial void OnReligionChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnFgAccessChanging(System.Nullable<char> value);
    partial void OnFgAccessChanged();
    partial void OnFgGoodsInChanging(System.Nullable<char> value);
    partial void OnFgGoodsInChanged();
    partial void OnFgGoodsOutChanging(System.Nullable<char> value);
    partial void OnFgGoodsOutChanged();
    partial void OnFgAdditionalVisitorChanging(System.Nullable<char> value);
    partial void OnFgAdditionalVisitorChanged();
    partial void OnFgAuthorizationContactChanging(System.Nullable<char> value);
    partial void OnFgAuthorizationContactChanged();
    partial void OnCardIDChanging(string value);
    partial void OnCardIDChanged();
    #endregion
		
		public MsCustContact()
		{
			this._MsCustContact_MsAreas = new EntitySet<MsCustContact_MsArea>(new Action<MsCustContact_MsArea>(this.attach_MsCustContact_MsAreas), new Action<MsCustContact_MsArea>(this.detach_MsCustContact_MsAreas));
			this._master_CustContactExtension = default(EntityRef<master_CustContactExtension>);
			this._MsCountry = default(EntityRef<MsCountry>);
			this._MsCustomer = default(EntityRef<MsCustomer>);
			this._MsReligion = default(EntityRef<MsReligion>);
			OnCreated();
		}
		
		[Column(Storage="_CustCode", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CustCode
		{
			get
			{
				return this._CustCode;
			}
			set
			{
				if ((this._CustCode != value))
				{
					if (this._MsCustomer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustCodeChanging(value);
					this.SendPropertyChanging();
					this._CustCode = value;
					this.SendPropertyChanged("CustCode");
					this.OnCustCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ItemNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemNo
		{
			get
			{
				return this._ItemNo;
			}
			set
			{
				if ((this._ItemNo != value))
				{
					this.OnItemNoChanging(value);
					this.SendPropertyChanging();
					this._ItemNo = value;
					this.SendPropertyChanged("ItemNo");
					this.OnItemNoChanged();
				}
			}
		}
		
		[Column(Storage="_ContactType", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string ContactType
		{
			get
			{
				return this._ContactType;
			}
			set
			{
				if ((this._ContactType != value))
				{
					this.OnContactTypeChanging(value);
					this.SendPropertyChanging();
					this._ContactType = value;
					this.SendPropertyChanged("ContactType");
					this.OnContactTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ContactName", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[Column(Storage="_ContactTitle", DbType="VarChar(30)")]
		public string ContactTitle
		{
			get
			{
				return this._ContactTitle;
			}
			set
			{
				if ((this._ContactTitle != value))
				{
					this.OnContactTitleChanging(value);
					this.SendPropertyChanging();
					this._ContactTitle = value;
					this.SendPropertyChanged("ContactTitle");
					this.OnContactTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Birthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[Column(Storage="_Religion", DbType="VarChar(10)")]
		public string Religion
		{
			get
			{
				return this._Religion;
			}
			set
			{
				if ((this._Religion != value))
				{
					if (this._MsReligion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReligionChanging(value);
					this.SendPropertyChanging();
					this._Religion = value;
					this.SendPropertyChanged("Religion");
					this.OnReligionChanged();
				}
			}
		}
		
		[Column(Storage="_Address1", DbType="VarChar(60)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[Column(Storage="_Address2", DbType="VarChar(60)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="VarChar(10)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					if (this._MsCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_ZipCode", DbType="VarChar(10)")]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(30)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="VarChar(30)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(40)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(80)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_FgAccess", DbType="VarChar(1)")]
		public System.Nullable<char> FgAccess
		{
			get
			{
				return this._FgAccess;
			}
			set
			{
				if ((this._FgAccess != value))
				{
					this.OnFgAccessChanging(value);
					this.SendPropertyChanging();
					this._FgAccess = value;
					this.SendPropertyChanged("FgAccess");
					this.OnFgAccessChanged();
				}
			}
		}
		
		[Column(Storage="_FgGoodsIn", DbType="VarChar(1)")]
		public System.Nullable<char> FgGoodsIn
		{
			get
			{
				return this._FgGoodsIn;
			}
			set
			{
				if ((this._FgGoodsIn != value))
				{
					this.OnFgGoodsInChanging(value);
					this.SendPropertyChanging();
					this._FgGoodsIn = value;
					this.SendPropertyChanged("FgGoodsIn");
					this.OnFgGoodsInChanged();
				}
			}
		}
		
		[Column(Storage="_FgGoodsOut", DbType="VarChar(1)")]
		public System.Nullable<char> FgGoodsOut
		{
			get
			{
				return this._FgGoodsOut;
			}
			set
			{
				if ((this._FgGoodsOut != value))
				{
					this.OnFgGoodsOutChanging(value);
					this.SendPropertyChanging();
					this._FgGoodsOut = value;
					this.SendPropertyChanged("FgGoodsOut");
					this.OnFgGoodsOutChanged();
				}
			}
		}
		
		[Column(Storage="_FgAdditionalVisitor", DbType="VarChar(1)")]
		public System.Nullable<char> FgAdditionalVisitor
		{
			get
			{
				return this._FgAdditionalVisitor;
			}
			set
			{
				if ((this._FgAdditionalVisitor != value))
				{
					this.OnFgAdditionalVisitorChanging(value);
					this.SendPropertyChanging();
					this._FgAdditionalVisitor = value;
					this.SendPropertyChanged("FgAdditionalVisitor");
					this.OnFgAdditionalVisitorChanged();
				}
			}
		}
		
		[Column(Storage="_FgAuthorizationContact", DbType="VarChar(1)")]
		public System.Nullable<char> FgAuthorizationContact
		{
			get
			{
				return this._FgAuthorizationContact;
			}
			set
			{
				if ((this._FgAuthorizationContact != value))
				{
					this.OnFgAuthorizationContactChanging(value);
					this.SendPropertyChanging();
					this._FgAuthorizationContact = value;
					this.SendPropertyChanged("FgAuthorizationContact");
					this.OnFgAuthorizationContactChanged();
				}
			}
		}
		
		[Column(Storage="_CardID", DbType="VarChar(30)")]
		public string CardID
		{
			get
			{
				return this._CardID;
			}
			set
			{
				if ((this._CardID != value))
				{
					this.OnCardIDChanging(value);
					this.SendPropertyChanging();
					this._CardID = value;
					this.SendPropertyChanged("CardID");
					this.OnCardIDChanged();
				}
			}
		}
		
		[Association(Name="MsCustContact_MsCustContact_MsArea", Storage="_MsCustContact_MsAreas", ThisKey="CustCode,ItemNo", OtherKey="CustCode,ItemNo")]
		public EntitySet<MsCustContact_MsArea> MsCustContact_MsAreas
		{
			get
			{
				return this._MsCustContact_MsAreas;
			}
			set
			{
				this._MsCustContact_MsAreas.Assign(value);
			}
		}
		
		[Association(Name="MsCustContact_master_CustContactExtension", Storage="_master_CustContactExtension", ThisKey="CustCode,ItemNo", OtherKey="CustCode,ItemNo", IsUnique=true, IsForeignKey=false)]
		public master_CustContactExtension master_CustContactExtension
		{
			get
			{
				return this._master_CustContactExtension.Entity;
			}
			set
			{
				master_CustContactExtension previousValue = this._master_CustContactExtension.Entity;
				if (((previousValue != value) 
							|| (this._master_CustContactExtension.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_CustContactExtension.Entity = null;
						previousValue.MsCustContact = null;
					}
					this._master_CustContactExtension.Entity = value;
					if ((value != null))
					{
						value.MsCustContact = this;
					}
					this.SendPropertyChanged("master_CustContactExtension");
				}
			}
		}
		
		[Association(Name="MsCountry_MsCustContact", Storage="_MsCountry", ThisKey="Country", OtherKey="CountryCode", IsForeignKey=true)]
		public MsCountry MsCountry
		{
			get
			{
				return this._MsCountry.Entity;
			}
			set
			{
				MsCountry previousValue = this._MsCountry.Entity;
				if (((previousValue != value) 
							|| (this._MsCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsCountry.Entity = null;
						previousValue.MsCustContacts.Remove(this);
					}
					this._MsCountry.Entity = value;
					if ((value != null))
					{
						value.MsCustContacts.Add(this);
						this._Country = value.CountryCode;
					}
					else
					{
						this._Country = default(string);
					}
					this.SendPropertyChanged("MsCountry");
				}
			}
		}
		
		[Association(Name="MsCustomer_MsCustContact", Storage="_MsCustomer", ThisKey="CustCode", OtherKey="CustCode", IsForeignKey=true)]
		public MsCustomer MsCustomer
		{
			get
			{
				return this._MsCustomer.Entity;
			}
			set
			{
				MsCustomer previousValue = this._MsCustomer.Entity;
				if (((previousValue != value) 
							|| (this._MsCustomer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsCustomer.Entity = null;
						previousValue.MsCustContacts.Remove(this);
					}
					this._MsCustomer.Entity = value;
					if ((value != null))
					{
						value.MsCustContacts.Add(this);
						this._CustCode = value.CustCode;
					}
					else
					{
						this._CustCode = default(string);
					}
					this.SendPropertyChanged("MsCustomer");
				}
			}
		}
		
		[Association(Name="MsReligion_MsCustContact", Storage="_MsReligion", ThisKey="Religion", OtherKey="ReligionCode", IsForeignKey=true)]
		public MsReligion MsReligion
		{
			get
			{
				return this._MsReligion.Entity;
			}
			set
			{
				MsReligion previousValue = this._MsReligion.Entity;
				if (((previousValue != value) 
							|| (this._MsReligion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsReligion.Entity = null;
						previousValue.MsCustContacts.Remove(this);
					}
					this._MsReligion.Entity = value;
					if ((value != null))
					{
						value.MsCustContacts.Add(this);
						this._Religion = value.ReligionCode;
					}
					else
					{
						this._Religion = default(string);
					}
					this.SendPropertyChanged("MsReligion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MsCustContact_MsAreas(MsCustContact_MsArea entity)
		{
			this.SendPropertyChanging();
			entity.MsCustContact = this;
		}
		
		private void detach_MsCustContact_MsAreas(MsCustContact_MsArea entity)
		{
			this.SendPropertyChanging();
			entity.MsCustContact = null;
		}
	}
	
	[Table(Name="dbo.master_CustContactExtension")]
	public partial class master_CustContactExtension : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CustCode;
		
		private int _ItemNo;
		
		private string _CustomerPhoto;
		
		private System.Nullable<int> _FingerIndex;
		
		private System.Data.Linq.Binary _FingerPrint;
		
		private EntityRef<MsCustContact> _MsCustContact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustCodeChanging(string value);
    partial void OnCustCodeChanged();
    partial void OnItemNoChanging(int value);
    partial void OnItemNoChanged();
    partial void OnCustomerPhotoChanging(string value);
    partial void OnCustomerPhotoChanged();
    partial void OnFingerIndexChanging(System.Nullable<int> value);
    partial void OnFingerIndexChanged();
    partial void OnFingerPrintChanging(System.Data.Linq.Binary value);
    partial void OnFingerPrintChanged();
    #endregion
		
		public master_CustContactExtension()
		{
			this._MsCustContact = default(EntityRef<MsCustContact>);
			OnCreated();
		}
		
		[Column(Storage="_CustCode", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CustCode
		{
			get
			{
				return this._CustCode;
			}
			set
			{
				if ((this._CustCode != value))
				{
					if (this._MsCustContact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustCodeChanging(value);
					this.SendPropertyChanging();
					this._CustCode = value;
					this.SendPropertyChanged("CustCode");
					this.OnCustCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ItemNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemNo
		{
			get
			{
				return this._ItemNo;
			}
			set
			{
				if ((this._ItemNo != value))
				{
					if (this._MsCustContact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemNoChanging(value);
					this.SendPropertyChanging();
					this._ItemNo = value;
					this.SendPropertyChanged("ItemNo");
					this.OnItemNoChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerPhoto", DbType="VarChar(100)")]
		public string CustomerPhoto
		{
			get
			{
				return this._CustomerPhoto;
			}
			set
			{
				if ((this._CustomerPhoto != value))
				{
					this.OnCustomerPhotoChanging(value);
					this.SendPropertyChanging();
					this._CustomerPhoto = value;
					this.SendPropertyChanged("CustomerPhoto");
					this.OnCustomerPhotoChanged();
				}
			}
		}
		
		[Column(Storage="_FingerIndex", DbType="Int")]
		public System.Nullable<int> FingerIndex
		{
			get
			{
				return this._FingerIndex;
			}
			set
			{
				if ((this._FingerIndex != value))
				{
					this.OnFingerIndexChanging(value);
					this.SendPropertyChanging();
					this._FingerIndex = value;
					this.SendPropertyChanged("FingerIndex");
					this.OnFingerIndexChanged();
				}
			}
		}
		
		[Column(Storage="_FingerPrint", DbType="Binary(400)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary FingerPrint
		{
			get
			{
				return this._FingerPrint;
			}
			set
			{
				if ((this._FingerPrint != value))
				{
					this.OnFingerPrintChanging(value);
					this.SendPropertyChanging();
					this._FingerPrint = value;
					this.SendPropertyChanged("FingerPrint");
					this.OnFingerPrintChanged();
				}
			}
		}
		
		[Association(Name="MsCustContact_master_CustContactExtension", Storage="_MsCustContact", ThisKey="CustCode,ItemNo", OtherKey="CustCode,ItemNo", IsForeignKey=true)]
		public MsCustContact MsCustContact
		{
			get
			{
				return this._MsCustContact.Entity;
			}
			set
			{
				MsCustContact previousValue = this._MsCustContact.Entity;
				if (((previousValue != value) 
							|| (this._MsCustContact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsCustContact.Entity = null;
						previousValue.master_CustContactExtension = null;
					}
					this._MsCustContact.Entity = value;
					if ((value != null))
					{
						value.master_CustContactExtension = this;
						this._CustCode = value.CustCode;
						this._ItemNo = value.ItemNo;
					}
					else
					{
						this._CustCode = default(string);
						this._ItemNo = default(int);
					}
					this.SendPropertyChanged("MsCustContact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GoodsInOutDt")]
	public partial class GoodsInOutDt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TransNmbr;
		
		private int _ItemNo;
		
		private string _ItemCode;
		
		private string _CustCode;
		
		private string _ProductName;
		
		private string _SerialNumber;
		
		private string _Remark;
		
		private string _ElectriCityNumerik;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransNmbrChanging(string value);
    partial void OnTransNmbrChanged();
    partial void OnItemNoChanging(int value);
    partial void OnItemNoChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnCustCodeChanging(string value);
    partial void OnCustCodeChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnElectriCityNumerikChanging(string value);
    partial void OnElectriCityNumerikChanged();
    #endregion
		
		public GoodsInOutDt()
		{
			OnCreated();
		}
		
		[Column(Storage="_TransNmbr", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TransNmbr
		{
			get
			{
				return this._TransNmbr;
			}
			set
			{
				if ((this._TransNmbr != value))
				{
					this.OnTransNmbrChanging(value);
					this.SendPropertyChanging();
					this._TransNmbr = value;
					this.SendPropertyChanged("TransNmbr");
					this.OnTransNmbrChanged();
				}
			}
		}
		
		[Column(Storage="_ItemNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemNo
		{
			get
			{
				return this._ItemNo;
			}
			set
			{
				if ((this._ItemNo != value))
				{
					this.OnItemNoChanging(value);
					this.SendPropertyChanging();
					this._ItemNo = value;
					this.SendPropertyChanged("ItemNo");
					this.OnItemNoChanged();
				}
			}
		}
		
		[Column(Storage="_ItemCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CustCode", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string CustCode
		{
			get
			{
				return this._CustCode;
			}
			set
			{
				if ((this._CustCode != value))
				{
					this.OnCustCodeChanging(value);
					this.SendPropertyChanging();
					this._CustCode = value;
					this.SendPropertyChanged("CustCode");
					this.OnCustCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_SerialNumber", DbType="VarChar(50)")]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(500)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_ElectriCityNumerik", DbType="VarChar(50)")]
		public string ElectriCityNumerik
		{
			get
			{
				return this._ElectriCityNumerik;
			}
			set
			{
				if ((this._ElectriCityNumerik != value))
				{
					this.OnElectriCityNumerikChanging(value);
					this.SendPropertyChanging();
					this._ElectriCityNumerik = value;
					this.SendPropertyChanged("ElectriCityNumerik");
					this.OnElectriCityNumerikChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TrGoodList")]
	public partial class TrGoodList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CustCode;
		
		private string _ItemCode;
		
		private string _ProductName;
		
		private string _SerialNumber;
		
		private string _Remark;
		
		private string _ElectriCityNumerik;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustCodeChanging(string value);
    partial void OnCustCodeChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnElectriCityNumerikChanging(string value);
    partial void OnElectriCityNumerikChanged();
    #endregion
		
		public TrGoodList()
		{
			OnCreated();
		}
		
		[Column(Storage="_CustCode", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CustCode
		{
			get
			{
				return this._CustCode;
			}
			set
			{
				if ((this._CustCode != value))
				{
					this.OnCustCodeChanging(value);
					this.SendPropertyChanging();
					this._CustCode = value;
					this.SendPropertyChanged("CustCode");
					this.OnCustCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ItemCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_SerialNumber", DbType="VarChar(50)")]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(500)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_ElectriCityNumerik", DbType="VarChar(50)")]
		public string ElectriCityNumerik
		{
			get
			{
				return this._ElectriCityNumerik;
			}
			set
			{
				if ((this._ElectriCityNumerik != value))
				{
					this.OnElectriCityNumerikChanging(value);
					this.SendPropertyChanging();
					this._ElectriCityNumerik = value;
					this.SendPropertyChanged("ElectriCityNumerik");
					this.OnElectriCityNumerikChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsUser")]
	public partial class MsUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _Password;
		
		private string _Email;
		
		private int _PermissionLevelCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPermissionLevelCodeChanging(int value);
    partial void OnPermissionLevelCodeChanged();
    #endregion
		
		public MsUser()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredUserName", DbType="VarChar(50)")]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(200)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_PermissionLevelCode", DbType="Int NOT NULL")]
		public int PermissionLevelCode
		{
			get
			{
				return this._PermissionLevelCode;
			}
			set
			{
				if ((this._PermissionLevelCode != value))
				{
					this.OnPermissionLevelCodeChanging(value);
					this.SendPropertyChanging();
					this._PermissionLevelCode = value;
					this.SendPropertyChanged("PermissionLevelCode");
					this.OnPermissionLevelCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsUser_MsEmployees")]
	public partial class MsUser_MsEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _EmpNumb;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmpNumbChanging(string value);
    partial void OnEmpNumbChanged();
    #endregion
		
		public MsUser_MsEmployee()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_EmpNumb", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EmpNumb
		{
			get
			{
				return this._EmpNumb;
			}
			set
			{
				if ((this._EmpNumb != value))
				{
					this.OnEmpNumbChanging(value);
					this.SendPropertyChanging();
					this._EmpNumb = value;
					this.SendPropertyChanged("EmpNumb");
					this.OnEmpNumbChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsEmployee")]
	public partial class MsEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EmpNumb;
		
		private string _EmpName;
		
		private string _JobLevel;
		
		private string _JobTitle;
		
		private bool _Active;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpNumbChanging(string value);
    partial void OnEmpNumbChanged();
    partial void OnEmpNameChanging(string value);
    partial void OnEmpNameChanged();
    partial void OnJobLevelChanging(string value);
    partial void OnJobLevelChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public MsEmployee()
		{
			OnCreated();
		}
		
		[Column(Storage="_EmpNumb", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EmpNumb
		{
			get
			{
				return this._EmpNumb;
			}
			set
			{
				if ((this._EmpNumb != value))
				{
					this.OnEmpNumbChanging(value);
					this.SendPropertyChanging();
					this._EmpNumb = value;
					this.SendPropertyChanged("EmpNumb");
					this.OnEmpNumbChanged();
				}
			}
		}
		
		[Column(Storage="_EmpName", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string EmpName
		{
			get
			{
				return this._EmpName;
			}
			set
			{
				if ((this._EmpName != value))
				{
					this.OnEmpNameChanging(value);
					this.SendPropertyChanging();
					this._EmpName = value;
					this.SendPropertyChanged("EmpName");
					this.OnEmpNameChanged();
				}
			}
		}
		
		[Column(Storage="_JobLevel", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string JobLevel
		{
			get
			{
				return this._JobLevel;
			}
			set
			{
				if ((this._JobLevel != value))
				{
					this.OnJobLevelChanging(value);
					this.SendPropertyChanging();
					this._JobLevel = value;
					this.SendPropertyChanged("JobLevel");
					this.OnJobLevelChanged();
				}
			}
		}
		
		[Column(Storage="_JobTitle", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string JobTitle
		{
			get
			{
				return this._JobTitle;
			}
			set
			{
				if ((this._JobTitle != value))
				{
					this.OnJobTitleChanging(value);
					this.SendPropertyChanging();
					this._JobTitle = value;
					this.SendPropertyChanged("JobTitle");
					this.OnJobTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsUserGroup")]
	public partial class MsUserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserGroupCode;
		
		private string _UserGroupName;
		
		private bool _FgAdmin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserGroupCodeChanging(string value);
    partial void OnUserGroupCodeChanged();
    partial void OnUserGroupNameChanging(string value);
    partial void OnUserGroupNameChanged();
    partial void OnFgAdminChanging(bool value);
    partial void OnFgAdminChanged();
    #endregion
		
		public MsUserGroup()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserGroupCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserGroupCode
		{
			get
			{
				return this._UserGroupCode;
			}
			set
			{
				if ((this._UserGroupCode != value))
				{
					this.OnUserGroupCodeChanging(value);
					this.SendPropertyChanging();
					this._UserGroupCode = value;
					this.SendPropertyChanged("UserGroupCode");
					this.OnUserGroupCodeChanged();
				}
			}
		}
		
		[Column(Storage="_UserGroupName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string UserGroupName
		{
			get
			{
				return this._UserGroupName;
			}
			set
			{
				if ((this._UserGroupName != value))
				{
					this.OnUserGroupNameChanging(value);
					this.SendPropertyChanging();
					this._UserGroupName = value;
					this.SendPropertyChanged("UserGroupName");
					this.OnUserGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_FgAdmin", DbType="Bit NOT NULL")]
		public bool FgAdmin
		{
			get
			{
				return this._FgAdmin;
			}
			set
			{
				if ((this._FgAdmin != value))
				{
					this.OnFgAdminChanging(value);
					this.SendPropertyChanging();
					this._FgAdmin = value;
					this.SendPropertyChanged("FgAdmin");
					this.OnFgAdminChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsUserGroupDt")]
	public partial class MsUserGroupDt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserGroupCode;
		
		private string _EmpNumb;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserGroupCodeChanging(string value);
    partial void OnUserGroupCodeChanged();
    partial void OnEmpNumbChanging(string value);
    partial void OnEmpNumbChanged();
    #endregion
		
		public MsUserGroupDt()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserGroupCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserGroupCode
		{
			get
			{
				return this._UserGroupCode;
			}
			set
			{
				if ((this._UserGroupCode != value))
				{
					this.OnUserGroupCodeChanging(value);
					this.SendPropertyChanging();
					this._UserGroupCode = value;
					this.SendPropertyChanged("UserGroupCode");
					this.OnUserGroupCodeChanged();
				}
			}
		}
		
		[Column(Storage="_EmpNumb", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EmpNumb
		{
			get
			{
				return this._EmpNumb;
			}
			set
			{
				if ((this._EmpNumb != value))
				{
					this.OnEmpNumbChanging(value);
					this.SendPropertyChanging();
					this._EmpNumb = value;
					this.SendPropertyChanged("EmpNumb");
					this.OnEmpNumbChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsAccessPermission")]
	public partial class MsAccessPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserGroup;
		
		private int _MenuID;
		
		private bool _AllowAccess;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserGroupChanging(string value);
    partial void OnUserGroupChanged();
    partial void OnMenuIDChanging(int value);
    partial void OnMenuIDChanged();
    partial void OnAllowAccessChanging(bool value);
    partial void OnAllowAccessChanged();
    #endregion
		
		public MsAccessPermission()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserGroup", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserGroup
		{
			get
			{
				return this._UserGroup;
			}
			set
			{
				if ((this._UserGroup != value))
				{
					this.OnUserGroupChanging(value);
					this.SendPropertyChanging();
					this._UserGroup = value;
					this.SendPropertyChanged("UserGroup");
					this.OnUserGroupChanged();
				}
			}
		}
		
		[Column(Storage="_MenuID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[Column(Storage="_AllowAccess", DbType="Bit NOT NULL")]
		public bool AllowAccess
		{
			get
			{
				return this._AllowAccess;
			}
			set
			{
				if ((this._AllowAccess != value))
				{
					this.OnAllowAccessChanging(value);
					this.SendPropertyChanging();
					this._AllowAccess = value;
					this.SendPropertyChanged("AllowAccess");
					this.OnAllowAccessChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_UserPermissionGroup")]
	public partial class V_UserPermissionGroup
	{
		
		private string _UserName;
		
		private string _UserGroupName;
		
		private bool _FgAdmin;
		
		public V_UserPermissionGroup()
		{
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_UserGroupName", DbType="VarChar(100)")]
		public string UserGroupName
		{
			get
			{
				return this._UserGroupName;
			}
			set
			{
				if ((this._UserGroupName != value))
				{
					this._UserGroupName = value;
				}
			}
		}
		
		[Column(Storage="_FgAdmin", DbType="Bit NOT NULL")]
		public bool FgAdmin
		{
			get
			{
				return this._FgAdmin;
			}
			set
			{
				if ((this._FgAdmin != value))
				{
					this._FgAdmin = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_UserPermissionGroup")]
	public partial class V_UserPermissionGroup1
	{
		
		private string _UserName;
		
		private string _UserGroupName;
		
		private bool _FgAdmin;
		
		public V_UserPermissionGroup1()
		{
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_UserGroupName", DbType="VarChar(100)")]
		public string UserGroupName
		{
			get
			{
				return this._UserGroupName;
			}
			set
			{
				if ((this._UserGroupName != value))
				{
					this._UserGroupName = value;
				}
			}
		}
		
		[Column(Storage="_FgAdmin", DbType="Bit NOT NULL")]
		public bool FgAdmin
		{
			get
			{
				return this._FgAdmin;
			}
			set
			{
				if ((this._FgAdmin != value))
				{
					this._FgAdmin = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.MsRackServer")]
	public partial class MsRackServer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RackCode;
		
		private string _RackName;
		
		private string _Remark;
		
		private EntitySet<MsRack_Customer> _MsRack_Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRackCodeChanging(string value);
    partial void OnRackCodeChanged();
    partial void OnRackNameChanging(string value);
    partial void OnRackNameChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public MsRackServer()
		{
			this._MsRack_Customers = new EntitySet<MsRack_Customer>(new Action<MsRack_Customer>(this.attach_MsRack_Customers), new Action<MsRack_Customer>(this.detach_MsRack_Customers));
			OnCreated();
		}
		
		[Column(Storage="_RackCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RackCode
		{
			get
			{
				return this._RackCode;
			}
			set
			{
				if ((this._RackCode != value))
				{
					this.OnRackCodeChanging(value);
					this.SendPropertyChanging();
					this._RackCode = value;
					this.SendPropertyChanged("RackCode");
					this.OnRackCodeChanged();
				}
			}
		}
		
		[Column(Storage="_RackName", DbType="VarChar(50)")]
		public string RackName
		{
			get
			{
				return this._RackName;
			}
			set
			{
				if ((this._RackName != value))
				{
					this.OnRackNameChanging(value);
					this.SendPropertyChanging();
					this._RackName = value;
					this.SendPropertyChanged("RackName");
					this.OnRackNameChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(80)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="MsRackServer_MsRack_Customer", Storage="_MsRack_Customers", ThisKey="RackCode", OtherKey="RackCode")]
		public EntitySet<MsRack_Customer> MsRack_Customers
		{
			get
			{
				return this._MsRack_Customers;
			}
			set
			{
				this._MsRack_Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MsRack_Customers(MsRack_Customer entity)
		{
			this.SendPropertyChanging();
			entity.MsRackServer = this;
		}
		
		private void detach_MsRack_Customers(MsRack_Customer entity)
		{
			this.SendPropertyChanging();
			entity.MsRackServer = null;
		}
	}
	
	[Table(Name="dbo.MsRackBox")]
	public partial class MsRackBox : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RackCode;
		
		private int _ItemNo;
		
		private string _RackBoxName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRackCodeChanging(string value);
    partial void OnRackCodeChanged();
    partial void OnItemNoChanging(int value);
    partial void OnItemNoChanged();
    partial void OnRackBoxNameChanging(string value);
    partial void OnRackBoxNameChanged();
    #endregion
		
		public MsRackBox()
		{
			OnCreated();
		}
		
		[Column(Storage="_RackCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RackCode
		{
			get
			{
				return this._RackCode;
			}
			set
			{
				if ((this._RackCode != value))
				{
					this.OnRackCodeChanging(value);
					this.SendPropertyChanging();
					this._RackCode = value;
					this.SendPropertyChanged("RackCode");
					this.OnRackCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ItemNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemNo
		{
			get
			{
				return this._ItemNo;
			}
			set
			{
				if ((this._ItemNo != value))
				{
					this.OnItemNoChanging(value);
					this.SendPropertyChanging();
					this._ItemNo = value;
					this.SendPropertyChanged("ItemNo");
					this.OnItemNoChanged();
				}
			}
		}
		
		[Column(Storage="_RackBoxName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RackBoxName
		{
			get
			{
				return this._RackBoxName;
			}
			set
			{
				if ((this._RackBoxName != value))
				{
					this.OnRackBoxNameChanging(value);
					this.SendPropertyChanging();
					this._RackBoxName = value;
					this.SendPropertyChanged("RackBoxName");
					this.OnRackBoxNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ClearanceDt")]
	public partial class ClearanceDt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClearanceCode;
		
		private string _AreaCode;
		
		private string _PurposeCode;
		
		private System.DateTime _CheckIn;
		
		private System.DateTime _CheckOut;
		
		private string _RackCode;
		
		private EntityRef<ClearanceHd> _ClearanceHd;
		
		private EntityRef<MsArea> _MsArea;
		
		private EntityRef<MsPurpose> _MsPurpose;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClearanceCodeChanging(string value);
    partial void OnClearanceCodeChanged();
    partial void OnAreaCodeChanging(string value);
    partial void OnAreaCodeChanged();
    partial void OnPurposeCodeChanging(string value);
    partial void OnPurposeCodeChanged();
    partial void OnCheckInChanging(System.DateTime value);
    partial void OnCheckInChanged();
    partial void OnCheckOutChanging(System.DateTime value);
    partial void OnCheckOutChanged();
    partial void OnRackCodeChanging(string value);
    partial void OnRackCodeChanged();
    #endregion
		
		public ClearanceDt()
		{
			this._ClearanceHd = default(EntityRef<ClearanceHd>);
			this._MsArea = default(EntityRef<MsArea>);
			this._MsPurpose = default(EntityRef<MsPurpose>);
			OnCreated();
		}
		
		[Column(Storage="_ClearanceCode", DbType="VarChar(14) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClearanceCode
		{
			get
			{
				return this._ClearanceCode;
			}
			set
			{
				if ((this._ClearanceCode != value))
				{
					if (this._ClearanceHd.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClearanceCodeChanging(value);
					this.SendPropertyChanging();
					this._ClearanceCode = value;
					this.SendPropertyChanged("ClearanceCode");
					this.OnClearanceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AreaCode", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					if (this._MsArea.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PurposeCode", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PurposeCode
		{
			get
			{
				return this._PurposeCode;
			}
			set
			{
				if ((this._PurposeCode != value))
				{
					if (this._MsPurpose.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurposeCodeChanging(value);
					this.SendPropertyChanging();
					this._PurposeCode = value;
					this.SendPropertyChanged("PurposeCode");
					this.OnPurposeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CheckIn", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime CheckIn
		{
			get
			{
				return this._CheckIn;
			}
			set
			{
				if ((this._CheckIn != value))
				{
					this.OnCheckInChanging(value);
					this.SendPropertyChanging();
					this._CheckIn = value;
					this.SendPropertyChanged("CheckIn");
					this.OnCheckInChanged();
				}
			}
		}
		
		[Column(Storage="_CheckOut", DbType="DateTime NOT NULL")]
		public System.DateTime CheckOut
		{
			get
			{
				return this._CheckOut;
			}
			set
			{
				if ((this._CheckOut != value))
				{
					this.OnCheckOutChanging(value);
					this.SendPropertyChanging();
					this._CheckOut = value;
					this.SendPropertyChanged("CheckOut");
					this.OnCheckOutChanged();
				}
			}
		}
		
		[Column(Storage="_RackCode", DbType="VarChar(50)")]
		public string RackCode
		{
			get
			{
				return this._RackCode;
			}
			set
			{
				if ((this._RackCode != value))
				{
					this.OnRackCodeChanging(value);
					this.SendPropertyChanging();
					this._RackCode = value;
					this.SendPropertyChanged("RackCode");
					this.OnRackCodeChanged();
				}
			}
		}
		
		[Association(Name="ClearanceHd_ClearanceDt", Storage="_ClearanceHd", ThisKey="ClearanceCode", OtherKey="ClearanceCode", IsForeignKey=true)]
		public ClearanceHd ClearanceHd
		{
			get
			{
				return this._ClearanceHd.Entity;
			}
			set
			{
				ClearanceHd previousValue = this._ClearanceHd.Entity;
				if (((previousValue != value) 
							|| (this._ClearanceHd.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClearanceHd.Entity = null;
						previousValue.ClearanceDts.Remove(this);
					}
					this._ClearanceHd.Entity = value;
					if ((value != null))
					{
						value.ClearanceDts.Add(this);
						this._ClearanceCode = value.ClearanceCode;
					}
					else
					{
						this._ClearanceCode = default(string);
					}
					this.SendPropertyChanged("ClearanceHd");
				}
			}
		}
		
		[Association(Name="MsArea_ClearanceDt", Storage="_MsArea", ThisKey="AreaCode", OtherKey="AreaCode", IsForeignKey=true)]
		public MsArea MsArea
		{
			get
			{
				return this._MsArea.Entity;
			}
			set
			{
				MsArea previousValue = this._MsArea.Entity;
				if (((previousValue != value) 
							|| (this._MsArea.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsArea.Entity = null;
						previousValue.ClearanceDts.Remove(this);
					}
					this._MsArea.Entity = value;
					if ((value != null))
					{
						value.ClearanceDts.Add(this);
						this._AreaCode = value.AreaCode;
					}
					else
					{
						this._AreaCode = default(string);
					}
					this.SendPropertyChanged("MsArea");
				}
			}
		}
		
		[Association(Name="MsPurpose_ClearanceDt", Storage="_MsPurpose", ThisKey="PurposeCode", OtherKey="PurposeCode", IsForeignKey=true)]
		public MsPurpose MsPurpose
		{
			get
			{
				return this._MsPurpose.Entity;
			}
			set
			{
				MsPurpose previousValue = this._MsPurpose.Entity;
				if (((previousValue != value) 
							|| (this._MsPurpose.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsPurpose.Entity = null;
						previousValue.ClearanceDts.Remove(this);
					}
					this._MsPurpose.Entity = value;
					if ((value != null))
					{
						value.ClearanceDts.Add(this);
						this._PurposeCode = value.PurposeCode;
					}
					else
					{
						this._PurposeCode = default(string);
					}
					this.SendPropertyChanged("MsPurpose");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GoodsInOutHd")]
	public partial class GoodsInOutHd : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TransNmbr;
		
		private string _FileNmbr;
		
		private string _TransType;
		
		private string _CustCode;
		
		private System.DateTime _TransDate;
		
		private string _Remark;
		
		private byte _Status;
		
		private string _CarryBy;
		
		private string _RequestedBy;
		
		private string _ApprovedBy;
		
		private string _PostedBy;
		
		private System.Nullable<System.DateTime> _EntryDate;
		
		private string _EntryUserName;
		
		private System.Nullable<System.DateTime> _EditDate;
		
		private string _EditUserName;
		
		private string _RackCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransNmbrChanging(string value);
    partial void OnTransNmbrChanged();
    partial void OnFileNmbrChanging(string value);
    partial void OnFileNmbrChanged();
    partial void OnTransTypeChanging(string value);
    partial void OnTransTypeChanged();
    partial void OnCustCodeChanging(string value);
    partial void OnCustCodeChanged();
    partial void OnTransDateChanging(System.DateTime value);
    partial void OnTransDateChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnCarryByChanging(string value);
    partial void OnCarryByChanged();
    partial void OnRequestedByChanging(string value);
    partial void OnRequestedByChanged();
    partial void OnApprovedByChanging(string value);
    partial void OnApprovedByChanged();
    partial void OnPostedByChanging(string value);
    partial void OnPostedByChanged();
    partial void OnEntryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEntryDateChanged();
    partial void OnEntryUserNameChanging(string value);
    partial void OnEntryUserNameChanged();
    partial void OnEditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditDateChanged();
    partial void OnEditUserNameChanging(string value);
    partial void OnEditUserNameChanged();
    partial void OnRackCodeChanging(string value);
    partial void OnRackCodeChanged();
    #endregion
		
		public GoodsInOutHd()
		{
			OnCreated();
		}
		
		[Column(Storage="_TransNmbr", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TransNmbr
		{
			get
			{
				return this._TransNmbr;
			}
			set
			{
				if ((this._TransNmbr != value))
				{
					this.OnTransNmbrChanging(value);
					this.SendPropertyChanging();
					this._TransNmbr = value;
					this.SendPropertyChanged("TransNmbr");
					this.OnTransNmbrChanged();
				}
			}
		}
		
		[Column(Storage="_FileNmbr", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FileNmbr
		{
			get
			{
				return this._FileNmbr;
			}
			set
			{
				if ((this._FileNmbr != value))
				{
					this.OnFileNmbrChanging(value);
					this.SendPropertyChanging();
					this._FileNmbr = value;
					this.SendPropertyChanged("FileNmbr");
					this.OnFileNmbrChanged();
				}
			}
		}
		
		[Column(Storage="_TransType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TransType
		{
			get
			{
				return this._TransType;
			}
			set
			{
				if ((this._TransType != value))
				{
					this.OnTransTypeChanging(value);
					this.SendPropertyChanging();
					this._TransType = value;
					this.SendPropertyChanged("TransType");
					this.OnTransTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CustCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CustCode
		{
			get
			{
				return this._CustCode;
			}
			set
			{
				if ((this._CustCode != value))
				{
					this.OnCustCodeChanging(value);
					this.SendPropertyChanging();
					this._CustCode = value;
					this.SendPropertyChanged("CustCode");
					this.OnCustCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TransDate", DbType="DateTime NOT NULL")]
		public System.DateTime TransDate
		{
			get
			{
				return this._TransDate;
			}
			set
			{
				if ((this._TransDate != value))
				{
					this.OnTransDateChanging(value);
					this.SendPropertyChanging();
					this._TransDate = value;
					this.SendPropertyChanged("TransDate");
					this.OnTransDateChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(500)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_CarryBy", DbType="VarChar(50)")]
		public string CarryBy
		{
			get
			{
				return this._CarryBy;
			}
			set
			{
				if ((this._CarryBy != value))
				{
					this.OnCarryByChanging(value);
					this.SendPropertyChanging();
					this._CarryBy = value;
					this.SendPropertyChanged("CarryBy");
					this.OnCarryByChanged();
				}
			}
		}
		
		[Column(Storage="_RequestedBy", DbType="VarChar(50)")]
		public string RequestedBy
		{
			get
			{
				return this._RequestedBy;
			}
			set
			{
				if ((this._RequestedBy != value))
				{
					this.OnRequestedByChanging(value);
					this.SendPropertyChanging();
					this._RequestedBy = value;
					this.SendPropertyChanged("RequestedBy");
					this.OnRequestedByChanged();
				}
			}
		}
		
		[Column(Storage="_ApprovedBy", DbType="VarChar(50)")]
		public string ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[Column(Storage="_PostedBy", DbType="VarChar(50)")]
		public string PostedBy
		{
			get
			{
				return this._PostedBy;
			}
			set
			{
				if ((this._PostedBy != value))
				{
					this.OnPostedByChanging(value);
					this.SendPropertyChanging();
					this._PostedBy = value;
					this.SendPropertyChanged("PostedBy");
					this.OnPostedByChanged();
				}
			}
		}
		
		[Column(Storage="_EntryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[Column(Storage="_EntryUserName", DbType="VarChar(50)")]
		public string EntryUserName
		{
			get
			{
				return this._EntryUserName;
			}
			set
			{
				if ((this._EntryUserName != value))
				{
					this.OnEntryUserNameChanging(value);
					this.SendPropertyChanging();
					this._EntryUserName = value;
					this.SendPropertyChanged("EntryUserName");
					this.OnEntryUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_EditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[Column(Storage="_EditUserName", DbType="VarChar(50)")]
		public string EditUserName
		{
			get
			{
				return this._EditUserName;
			}
			set
			{
				if ((this._EditUserName != value))
				{
					this.OnEditUserNameChanging(value);
					this.SendPropertyChanging();
					this._EditUserName = value;
					this.SendPropertyChanged("EditUserName");
					this.OnEditUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_RackCode", DbType="VarChar(50)")]
		public string RackCode
		{
			get
			{
				return this._RackCode;
			}
			set
			{
				if ((this._RackCode != value))
				{
					this.OnRackCodeChanging(value);
					this.SendPropertyChanging();
					this._RackCode = value;
					this.SendPropertyChanged("RackCode");
					this.OnRackCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsRack_Customer")]
	public partial class MsRack_Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RackCustomerCode;
		
		private string _CustCode;
		
		private string _RackCode;
		
		private EntityRef<MsCustomer> _MsCustomer;
		
		private EntityRef<MsRackServer> _MsRackServer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRackCustomerCodeChanging(System.Guid value);
    partial void OnRackCustomerCodeChanged();
    partial void OnCustCodeChanging(string value);
    partial void OnCustCodeChanged();
    partial void OnRackCodeChanging(string value);
    partial void OnRackCodeChanged();
    #endregion
		
		public MsRack_Customer()
		{
			this._MsCustomer = default(EntityRef<MsCustomer>);
			this._MsRackServer = default(EntityRef<MsRackServer>);
			OnCreated();
		}
		
		[Column(Storage="_RackCustomerCode", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RackCustomerCode
		{
			get
			{
				return this._RackCustomerCode;
			}
			set
			{
				if ((this._RackCustomerCode != value))
				{
					this.OnRackCustomerCodeChanging(value);
					this.SendPropertyChanging();
					this._RackCustomerCode = value;
					this.SendPropertyChanged("RackCustomerCode");
					this.OnRackCustomerCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CustCode", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string CustCode
		{
			get
			{
				return this._CustCode;
			}
			set
			{
				if ((this._CustCode != value))
				{
					if (this._MsCustomer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustCodeChanging(value);
					this.SendPropertyChanging();
					this._CustCode = value;
					this.SendPropertyChanged("CustCode");
					this.OnCustCodeChanged();
				}
			}
		}
		
		[Column(Storage="_RackCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RackCode
		{
			get
			{
				return this._RackCode;
			}
			set
			{
				if ((this._RackCode != value))
				{
					if (this._MsRackServer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRackCodeChanging(value);
					this.SendPropertyChanging();
					this._RackCode = value;
					this.SendPropertyChanged("RackCode");
					this.OnRackCodeChanged();
				}
			}
		}
		
		[Association(Name="MsCustomer_MsRack_Customer", Storage="_MsCustomer", ThisKey="CustCode", OtherKey="CustCode", IsForeignKey=true)]
		public MsCustomer MsCustomer
		{
			get
			{
				return this._MsCustomer.Entity;
			}
			set
			{
				MsCustomer previousValue = this._MsCustomer.Entity;
				if (((previousValue != value) 
							|| (this._MsCustomer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsCustomer.Entity = null;
						previousValue.MsRack_Customers.Remove(this);
					}
					this._MsCustomer.Entity = value;
					if ((value != null))
					{
						value.MsRack_Customers.Add(this);
						this._CustCode = value.CustCode;
					}
					else
					{
						this._CustCode = default(string);
					}
					this.SendPropertyChanged("MsCustomer");
				}
			}
		}
		
		[Association(Name="MsRackServer_MsRack_Customer", Storage="_MsRackServer", ThisKey="RackCode", OtherKey="RackCode", IsForeignKey=true)]
		public MsRackServer MsRackServer
		{
			get
			{
				return this._MsRackServer.Entity;
			}
			set
			{
				MsRackServer previousValue = this._MsRackServer.Entity;
				if (((previousValue != value) 
							|| (this._MsRackServer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MsRackServer.Entity = null;
						previousValue.MsRack_Customers.Remove(this);
					}
					this._MsRackServer.Entity = value;
					if ((value != null))
					{
						value.MsRack_Customers.Add(this);
						this._RackCode = value.RackCode;
					}
					else
					{
						this._RackCode = default(string);
					}
					this.SendPropertyChanged("MsRackServer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
