#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InetGlobalIndo.ERP.MTJ.DBFactory.ERPManSys
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SIP_ERP_Management_System")]
	public partial class GeneralDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertErrorLog(ErrorLog instance);
    partial void UpdateErrorLog(ErrorLog instance);
    partial void DeleteErrorLog(ErrorLog instance);
    #endregion
		
		public GeneralDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeneralDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeneralDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeneralDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ErrorLog> ErrorLogs
		{
			get
			{
				return this.GetTable<ErrorLog>();
			}
		}
	}
	
	[Table(Name="dbo.ErrorLog")]
	public partial class ErrorLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Code;
		
		private System.DateTime _Date;
		
		private string _ErrorMessage;
		
		private string _StackMessage;
		
		private string _UserName;
		
		private string _MethodCall;
		
		private string _TransType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(System.Guid value);
    partial void OnCodeChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    partial void OnStackMessageChanging(string value);
    partial void OnStackMessageChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnMethodCallChanging(string value);
    partial void OnMethodCallChanged();
    partial void OnTransTypeChanging(string value);
    partial void OnTransTypeChanged();
    #endregion
		
		public ErrorLog()
		{
			OnCreated();
		}
		
		[Column(Storage="_Code", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorMessage", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[Column(Storage="_StackMessage", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string StackMessage
		{
			get
			{
				return this._StackMessage;
			}
			set
			{
				if ((this._StackMessage != value))
				{
					this.OnStackMessageChanging(value);
					this.SendPropertyChanging();
					this._StackMessage = value;
					this.SendPropertyChanged("StackMessage");
					this.OnStackMessageChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_MethodCall", DbType="VarChar(500)")]
		public string MethodCall
		{
			get
			{
				return this._MethodCall;
			}
			set
			{
				if ((this._MethodCall != value))
				{
					this.OnMethodCallChanging(value);
					this.SendPropertyChanging();
					this._MethodCall = value;
					this.SendPropertyChanged("MethodCall");
					this.OnMethodCallChanged();
				}
			}
		}
		
		[Column(Storage="_TransType", DbType="VarChar(50)")]
		public string TransType
		{
			get
			{
				return this._TransType;
			}
			set
			{
				if ((this._TransType != value))
				{
					this.OnTransTypeChanging(value);
					this.SendPropertyChanging();
					this._TransType = value;
					this.SendPropertyChanged("TransType");
					this.OnTransTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
