#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InetGlobalIndo.ERP.MTJ.DBFactory.Membership
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SIP_Membership")]
	public partial class MTJMembershipDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaspnet_Application(aspnet_Application instance);
    partial void Updateaspnet_Application(aspnet_Application instance);
    partial void Deleteaspnet_Application(aspnet_Application instance);
    partial void Insertaspnet_Membership(aspnet_Membership instance);
    partial void Updateaspnet_Membership(aspnet_Membership instance);
    partial void Deleteaspnet_Membership(aspnet_Membership instance);
    partial void Insertaspnet_Path(aspnet_Path instance);
    partial void Updateaspnet_Path(aspnet_Path instance);
    partial void Deleteaspnet_Path(aspnet_Path instance);
    partial void Insertaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Updateaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Deleteaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Insertaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Updateaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Deleteaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Insertaspnet_Profile(aspnet_Profile instance);
    partial void Updateaspnet_Profile(aspnet_Profile instance);
    partial void Deleteaspnet_Profile(aspnet_Profile instance);
    partial void Insertaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Updateaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Deleteaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Insertaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Updateaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Deleteaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Insertaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void Updateaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void Deleteaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void Insertmaster_Menu_aspnet_Role(master_Menu_aspnet_Role instance);
    partial void Updatemaster_Menu_aspnet_Role(master_Menu_aspnet_Role instance);
    partial void Deletemaster_Menu_aspnet_Role(master_Menu_aspnet_Role instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertUser_Employee(User_Employee instance);
    partial void UpdateUser_Employee(User_Employee instance);
    partial void DeleteUser_Employee(User_Employee instance);
    partial void Insertmaster_Company_aspnet_User(master_Company_aspnet_User instance);
    partial void Updatemaster_Company_aspnet_User(master_Company_aspnet_User instance);
    partial void Deletemaster_Company_aspnet_User(master_Company_aspnet_User instance);
    partial void Insertmaster_UserConnMode(master_UserConnMode instance);
    partial void Updatemaster_UserConnMode(master_UserConnMode instance);
    partial void Deletemaster_UserConnMode(master_UserConnMode instance);
    partial void Insertmaster_Database_aspnet_User(master_Database_aspnet_User instance);
    partial void Updatemaster_Database_aspnet_User(master_Database_aspnet_User instance);
    partial void Deletemaster_Database_aspnet_User(master_Database_aspnet_User instance);
    partial void Insertmaster_Company_master_Database(master_Company_master_Database instance);
    partial void Updatemaster_Company_master_Database(master_Company_master_Database instance);
    partial void Deletemaster_Company_master_Database(master_Company_master_Database instance);
    partial void Insertaspnet_Role(aspnet_Role instance);
    partial void Updateaspnet_Role(aspnet_Role instance);
    partial void Deleteaspnet_Role(aspnet_Role instance);
    partial void Insertmaster_Role(master_Role instance);
    partial void Updatemaster_Role(master_Role instance);
    partial void Deletemaster_Role(master_Role instance);
    partial void Insertmaster_PermissionTemplate(master_PermissionTemplate instance);
    partial void Updatemaster_PermissionTemplate(master_PermissionTemplate instance);
    partial void Deletemaster_PermissionTemplate(master_PermissionTemplate instance);
    partial void Insertmaster_Company_aspnet_Role(master_Company_aspnet_Role instance);
    partial void Updatemaster_Company_aspnet_Role(master_Company_aspnet_Role instance);
    partial void Deletemaster_Company_aspnet_Role(master_Company_aspnet_Role instance);
    partial void Insertmaster_RolePermission(master_RolePermission instance);
    partial void Updatemaster_RolePermission(master_RolePermission instance);
    partial void Deletemaster_RolePermission(master_RolePermission instance);
    partial void Insertmaster_Database(master_Database instance);
    partial void Updatemaster_Database(master_Database instance);
    partial void Deletemaster_Database(master_Database instance);
    partial void Insertmaster_RoleMenu(master_RoleMenu instance);
    partial void Updatemaster_RoleMenu(master_RoleMenu instance);
    partial void Deletemaster_RoleMenu(master_RoleMenu instance);
    partial void Insertmaster_UserExtension(master_UserExtension instance);
    partial void Updatemaster_UserExtension(master_UserExtension instance);
    partial void Deletemaster_UserExtension(master_UserExtension instance);
    partial void Insertmaster_CompanyMenu(master_CompanyMenu instance);
    partial void Updatemaster_CompanyMenu(master_CompanyMenu instance);
    partial void Deletemaster_CompanyMenu(master_CompanyMenu instance);
    partial void InsertMsReminder(MsReminder instance);
    partial void UpdateMsReminder(MsReminder instance);
    partial void DeleteMsReminder(MsReminder instance);
    partial void InsertMsReminderMapping(MsReminderMapping instance);
    partial void UpdateMsReminderMapping(MsReminderMapping instance);
    partial void DeleteMsReminderMapping(MsReminderMapping instance);
    partial void Insertmaster_ReportListTemplate(master_ReportListTemplate instance);
    partial void Updatemaster_ReportListTemplate(master_ReportListTemplate instance);
    partial void Deletemaster_ReportListTemplate(master_ReportListTemplate instance);
    partial void Insertmaster_Menu(master_Menu instance);
    partial void Updatemaster_Menu(master_Menu instance);
    partial void Deletemaster_Menu(master_Menu instance);
    partial void Insertmaster_theme(master_theme instance);
    partial void Updatemaster_theme(master_theme instance);
    partial void Deletemaster_theme(master_theme instance);
    partial void Insertmaster_Company(master_Company instance);
    partial void Updatemaster_Company(master_Company instance);
    partial void Deletemaster_Company(master_Company instance);
    partial void Insertmaster_ReportList(master_ReportList instance);
    partial void Updatemaster_ReportList(master_ReportList instance);
    partial void Deletemaster_ReportList(master_ReportList instance);
    partial void InsertMsDbConsolidationList(MsDbConsolidationList instance);
    partial void UpdateMsDbConsolidationList(MsDbConsolidationList instance);
    partial void DeleteMsDbConsolidationList(MsDbConsolidationList instance);
    partial void InsertMsLinkServer(MsLinkServer instance);
    partial void UpdateMsLinkServer(MsLinkServer instance);
    partial void DeleteMsLinkServer(MsLinkServer instance);
    partial void InsertMsTableSync(MsTableSync instance);
    partial void UpdateMsTableSync(MsTableSync instance);
    partial void DeleteMsTableSync(MsTableSync instance);
    #endregion
		
		public MTJMembershipDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MTJMembershipDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MTJMembershipDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MTJMembershipDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<aspnet_Application> aspnet_Applications
		{
			get
			{
				return this.GetTable<aspnet_Application>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this.GetTable<aspnet_Membership>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Path> aspnet_Paths
		{
			get
			{
				return this.GetTable<aspnet_Path>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_PersonalizationAllUser> aspnet_PersonalizationAllUsers
		{
			get
			{
				return this.GetTable<aspnet_PersonalizationAllUser>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this.GetTable<aspnet_PersonalizationPerUser>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Profile> aspnet_Profiles
		{
			get
			{
				return this.GetTable<aspnet_Profile>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_SchemaVersion> aspnet_SchemaVersions
		{
			get
			{
				return this.GetTable<aspnet_SchemaVersion>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this.GetTable<aspnet_UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_WebEvent_Event> aspnet_WebEvent_Events
		{
			get
			{
				return this.GetTable<aspnet_WebEvent_Event>();
			}
		}
		
		public System.Data.Linq.Table<master_Menu_aspnet_Role> master_Menu_aspnet_Roles
		{
			get
			{
				return this.GetTable<master_Menu_aspnet_Role>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<User_Employee> User_Employees
		{
			get
			{
				return this.GetTable<User_Employee>();
			}
		}
		
		public System.Data.Linq.Table<master_Company_aspnet_User> master_Company_aspnet_Users
		{
			get
			{
				return this.GetTable<master_Company_aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<master_UserConnMode> master_UserConnModes
		{
			get
			{
				return this.GetTable<master_UserConnMode>();
			}
		}
		
		public System.Data.Linq.Table<master_Database_aspnet_User> master_Database_aspnet_Users
		{
			get
			{
				return this.GetTable<master_Database_aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<master_Company_master_Database> master_Company_master_Databases
		{
			get
			{
				return this.GetTable<master_Company_master_Database>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Role> aspnet_Roles
		{
			get
			{
				return this.GetTable<aspnet_Role>();
			}
		}
		
		public System.Data.Linq.Table<master_Role> master_Roles
		{
			get
			{
				return this.GetTable<master_Role>();
			}
		}
		
		public System.Data.Linq.Table<master_PermissionTemplate> master_PermissionTemplates
		{
			get
			{
				return this.GetTable<master_PermissionTemplate>();
			}
		}
		
		public System.Data.Linq.Table<master_Company_aspnet_Role> master_Company_aspnet_Roles
		{
			get
			{
				return this.GetTable<master_Company_aspnet_Role>();
			}
		}
		
		public System.Data.Linq.Table<master_RolePermission> master_RolePermissions
		{
			get
			{
				return this.GetTable<master_RolePermission>();
			}
		}
		
		public System.Data.Linq.Table<master_Database> master_Databases
		{
			get
			{
				return this.GetTable<master_Database>();
			}
		}
		
		public System.Data.Linq.Table<master_RoleMenu> master_RoleMenus
		{
			get
			{
				return this.GetTable<master_RoleMenu>();
			}
		}
		
		public System.Data.Linq.Table<master_UserExtension> master_UserExtensions
		{
			get
			{
				return this.GetTable<master_UserExtension>();
			}
		}
		
		public System.Data.Linq.Table<master_CompanyMenu> master_CompanyMenus
		{
			get
			{
				return this.GetTable<master_CompanyMenu>();
			}
		}
		
		public System.Data.Linq.Table<MsReminder> MsReminders
		{
			get
			{
				return this.GetTable<MsReminder>();
			}
		}
		
		public System.Data.Linq.Table<MsReminderMapping> MsReminderMappings
		{
			get
			{
				return this.GetTable<MsReminderMapping>();
			}
		}
		
		public System.Data.Linq.Table<master_ReportListTemplate> master_ReportListTemplates
		{
			get
			{
				return this.GetTable<master_ReportListTemplate>();
			}
		}
		
		public System.Data.Linq.Table<master_Menu> master_Menus
		{
			get
			{
				return this.GetTable<master_Menu>();
			}
		}
		
		public System.Data.Linq.Table<master_theme> master_themes
		{
			get
			{
				return this.GetTable<master_theme>();
			}
		}
		
		public System.Data.Linq.Table<master_Company> master_Companies
		{
			get
			{
				return this.GetTable<master_Company>();
			}
		}
		
		public System.Data.Linq.Table<master_ReportList> master_ReportLists
		{
			get
			{
				return this.GetTable<master_ReportList>();
			}
		}
		
		public System.Data.Linq.Table<MsDbConsolidationList> MsDbConsolidationLists
		{
			get
			{
				return this.GetTable<MsDbConsolidationList>();
			}
		}
		
		public System.Data.Linq.Table<MsLinkServer> MsLinkServers
		{
			get
			{
				return this.GetTable<MsLinkServer>();
			}
		}
		
		public System.Data.Linq.Table<MsTableSync> MsTableSyncs
		{
			get
			{
				return this.GetTable<MsTableSync>();
			}
		}
		
		[Function(Name="dbo.GrantOrDenyAllPermByRoleAndModule")]
		public int GrantOrDenyAllPermByRoleAndModule([Parameter(DbType="TinyInt")] System.Nullable<byte> flagTo, [Parameter(DbType="VarChar(5)")] string moduleID, [Parameter(DbType="VarChar(50)")] string roleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flagTo, moduleID, roleID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_RolePermission")]
		public int sp_RolePermission([Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> roleID, [Parameter(DbType="SmallInt")] System.Nullable<short> menuID, [Parameter(DbType="VarChar(50)")] string field, [Parameter(DbType="Bit")] System.Nullable<bool> permission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleID, menuID, field, permission);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.aspnet_Applications")]
	public partial class aspnet_Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ApplicationName;
		
		private string _LoweredApplicationName;
		
		private System.Guid _ApplicationId;
		
		private string _Description;
		
		private EntitySet<aspnet_Membership> _aspnet_Memberships;
		
		private EntitySet<aspnet_Path> _aspnet_Paths;
		
		private EntitySet<aspnet_User> _aspnet_Users;
		
		private EntitySet<aspnet_Role> _aspnet_Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnLoweredApplicationNameChanging(string value);
    partial void OnLoweredApplicationNameChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Application()
		{
			this._aspnet_Memberships = new EntitySet<aspnet_Membership>(new Action<aspnet_Membership>(this.attach_aspnet_Memberships), new Action<aspnet_Membership>(this.detach_aspnet_Memberships));
			this._aspnet_Paths = new EntitySet<aspnet_Path>(new Action<aspnet_Path>(this.attach_aspnet_Paths), new Action<aspnet_Path>(this.detach_aspnet_Paths));
			this._aspnet_Users = new EntitySet<aspnet_User>(new Action<aspnet_User>(this.attach_aspnet_Users), new Action<aspnet_User>(this.detach_aspnet_Users));
			this._aspnet_Roles = new EntitySet<aspnet_Role>(new Action<aspnet_Role>(this.attach_aspnet_Roles), new Action<aspnet_Role>(this.detach_aspnet_Roles));
			OnCreated();
		}
		
		[Column(Storage="_ApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredApplicationName
		{
			get
			{
				return this._LoweredApplicationName;
			}
			set
			{
				if ((this._LoweredApplicationName != value))
				{
					this.OnLoweredApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredApplicationName = value;
					this.SendPropertyChanged("LoweredApplicationName");
					this.OnLoweredApplicationNameChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Memberships", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this._aspnet_Memberships;
			}
			set
			{
				this._aspnet_Memberships.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_Path", Storage="_aspnet_Paths", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Path> aspnet_Paths
		{
			get
			{
				return this._aspnet_Paths;
			}
			set
			{
				this._aspnet_Paths.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Users", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_User> aspnet_Users
		{
			get
			{
				return this._aspnet_Users;
			}
			set
			{
				this._aspnet_Users.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Roles", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Role> aspnet_Roles
		{
			get
			{
				return this._aspnet_Roles;
			}
			set
			{
				this._aspnet_Roles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Paths(aspnet_Path entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Paths(aspnet_Path entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Users(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Users(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Roles(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Roles(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
	}
	
	[Table(Name="dbo.aspnet_Membership")]
	public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _Password;
		
		private int _PasswordFormat;
		
		private string _PasswordSalt;
		
		private string _MobilePIN;
		
		private string _Email;
		
		private string _LoweredEmail;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockoutDate;
		
		private int _FailedPasswordAttemptCount;
		
		private System.DateTime _FailedPasswordAttemptWindowStart;
		
		private int _FailedPasswordAnswerAttemptCount;
		
		private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
		
		private string _Comment;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public aspnet_Membership()
		{
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordFormat", DbType="Int NOT NULL")]
		public int PasswordFormat
		{
			get
			{
				return this._PasswordFormat;
			}
			set
			{
				if ((this._PasswordFormat != value))
				{
					this.OnPasswordFormatChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormat = value;
					this.SendPropertyChanged("PasswordFormat");
					this.OnPasswordFormatChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[Column(Storage="_MobilePIN", DbType="NVarChar(16)")]
		public string MobilePIN
		{
			get
			{
				return this._MobilePIN;
			}
			set
			{
				if ((this._MobilePIN != value))
				{
					this.OnMobilePINChanging(value);
					this.SendPropertyChanging();
					this._MobilePIN = value;
					this.SendPropertyChanged("MobilePIN");
					this.OnMobilePINChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredEmail", DbType="NVarChar(256)")]
		public string LoweredEmail
		{
			get
			{
				return this._LoweredEmail;
			}
			set
			{
				if ((this._LoweredEmail != value))
				{
					this.OnLoweredEmailChanging(value);
					this.SendPropertyChanging();
					this._LoweredEmail = value;
					this.SendPropertyChanged("LoweredEmail");
					this.OnLoweredEmailChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[Column(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAttemptWindowStart != value))
				{
					this.OnFailedPasswordAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
					this.OnFailedPasswordAttemptWindowStartChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAnswerAttemptCount
		{
			get
			{
				return this._FailedPasswordAnswerAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptCount != value))
				{
					this.OnFailedPasswordAnswerAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
					this.OnFailedPasswordAnswerAttemptCountChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAnswerAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAnswerAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptWindowStart != value))
				{
					this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
					this.OnFailedPasswordAnswerAttemptWindowStartChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Memberships.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Memberships.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Membership = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Membership = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.aspnet_Paths")]
	public partial class aspnet_Path : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _PathId;
		
		private string _Path;
		
		private string _LoweredPath;
		
		private EntityRef<aspnet_PersonalizationAllUser> _aspnet_PersonalizationAllUser;
		
		private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnPathIdChanging(System.Guid value);
    partial void OnPathIdChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnLoweredPathChanging(string value);
    partial void OnLoweredPathChanged();
    #endregion
		
		public aspnet_Path()
		{
			this._aspnet_PersonalizationAllUser = default(EntityRef<aspnet_PersonalizationAllUser>);
			this._aspnet_PersonalizationPerUsers = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_PathId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredPath", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredPath
		{
			get
			{
				return this._LoweredPath;
			}
			set
			{
				if ((this._LoweredPath != value))
				{
					this.OnLoweredPathChanging(value);
					this.SendPropertyChanging();
					this._LoweredPath = value;
					this.SendPropertyChanged("LoweredPath");
					this.OnLoweredPathChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Path_aspnet_PersonalizationAllUser", Storage="_aspnet_PersonalizationAllUser", ThisKey="PathId", OtherKey="PathId", IsUnique=true, IsForeignKey=false)]
		public aspnet_PersonalizationAllUser aspnet_PersonalizationAllUser
		{
			get
			{
				return this._aspnet_PersonalizationAllUser.Entity;
			}
			set
			{
				aspnet_PersonalizationAllUser previousValue = this._aspnet_PersonalizationAllUser.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_PersonalizationAllUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_PersonalizationAllUser.Entity = null;
						previousValue.aspnet_Path = null;
					}
					this._aspnet_PersonalizationAllUser.Entity = value;
					if ((value != null))
					{
						value.aspnet_Path = this;
					}
					this.SendPropertyChanged("aspnet_PersonalizationAllUser");
				}
			}
		}
		
		[Association(Name="aspnet_Path_aspnet_PersonalizationPerUser", Storage="_aspnet_PersonalizationPerUsers", ThisKey="PathId", OtherKey="PathId")]
		public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this._aspnet_PersonalizationPerUsers;
			}
			set
			{
				this._aspnet_PersonalizationPerUsers.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_Path", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Paths.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Paths.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Path = this;
		}
		
		private void detach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Path = null;
		}
	}
	
	[Table(Name="dbo.aspnet_PersonalizationAllUsers")]
	public partial class aspnet_PersonalizationAllUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PathId;
		
		private System.Data.Linq.Binary _PageSettings;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_Path> _aspnet_Path;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPathIdChanging(System.Guid value);
    partial void OnPathIdChanged();
    partial void OnPageSettingsChanging(System.Data.Linq.Binary value);
    partial void OnPageSettingsChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_PersonalizationAllUser()
		{
			this._aspnet_Path = default(EntityRef<aspnet_Path>);
			OnCreated();
		}
		
		[Column(Storage="_PathId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					if (this._aspnet_Path.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[Column(Storage="_PageSettings", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PageSettings
		{
			get
			{
				return this._PageSettings;
			}
			set
			{
				if ((this._PageSettings != value))
				{
					this.OnPageSettingsChanging(value);
					this.SendPropertyChanging();
					this._PageSettings = value;
					this.SendPropertyChanged("PageSettings");
					this.OnPageSettingsChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Path_aspnet_PersonalizationAllUser", Storage="_aspnet_Path", ThisKey="PathId", OtherKey="PathId", IsForeignKey=true)]
		public aspnet_Path aspnet_Path
		{
			get
			{
				return this._aspnet_Path.Entity;
			}
			set
			{
				aspnet_Path previousValue = this._aspnet_Path.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Path.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Path.Entity = null;
						previousValue.aspnet_PersonalizationAllUser = null;
					}
					this._aspnet_Path.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationAllUser = this;
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Path");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.aspnet_PersonalizationPerUser")]
	public partial class aspnet_PersonalizationPerUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _PathId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Data.Linq.Binary _PageSettings;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_Path> _aspnet_Path;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnPathIdChanging(System.Nullable<System.Guid> value);
    partial void OnPathIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnPageSettingsChanging(System.Data.Linq.Binary value);
    partial void OnPageSettingsChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_PersonalizationPerUser()
		{
			this._aspnet_Path = default(EntityRef<aspnet_Path>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_PathId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					if (this._aspnet_Path.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_PageSettings", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PageSettings
		{
			get
			{
				return this._PageSettings;
			}
			set
			{
				if ((this._PageSettings != value))
				{
					this.OnPageSettingsChanging(value);
					this.SendPropertyChanging();
					this._PageSettings = value;
					this.SendPropertyChanged("PageSettings");
					this.OnPageSettingsChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Path_aspnet_PersonalizationPerUser", Storage="_aspnet_Path", ThisKey="PathId", OtherKey="PathId", IsForeignKey=true)]
		public aspnet_Path aspnet_Path
		{
			get
			{
				return this._aspnet_Path.Entity;
			}
			set
			{
				aspnet_Path previousValue = this._aspnet_Path.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Path.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Path.Entity = null;
						previousValue.aspnet_PersonalizationPerUsers.Remove(this);
					}
					this._aspnet_Path.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationPerUsers.Add(this);
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_Path");
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_PersonalizationPerUser", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_PersonalizationPerUsers.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationPerUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.aspnet_Profile")]
	public partial class aspnet_Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private string _PropertyNames;
		
		private string _PropertyValuesString;
		
		private System.Data.Linq.Binary _PropertyValuesBinary;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPropertyNamesChanging(string value);
    partial void OnPropertyNamesChanged();
    partial void OnPropertyValuesStringChanging(string value);
    partial void OnPropertyValuesStringChanged();
    partial void OnPropertyValuesBinaryChanging(System.Data.Linq.Binary value);
    partial void OnPropertyValuesBinaryChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_Profile()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_PropertyNames", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PropertyNames
		{
			get
			{
				return this._PropertyNames;
			}
			set
			{
				if ((this._PropertyNames != value))
				{
					this.OnPropertyNamesChanging(value);
					this.SendPropertyChanging();
					this._PropertyNames = value;
					this.SendPropertyChanged("PropertyNames");
					this.OnPropertyNamesChanged();
				}
			}
		}
		
		[Column(Storage="_PropertyValuesString", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PropertyValuesString
		{
			get
			{
				return this._PropertyValuesString;
			}
			set
			{
				if ((this._PropertyValuesString != value))
				{
					this.OnPropertyValuesStringChanging(value);
					this.SendPropertyChanging();
					this._PropertyValuesString = value;
					this.SendPropertyChanged("PropertyValuesString");
					this.OnPropertyValuesStringChanged();
				}
			}
		}
		
		[Column(Storage="_PropertyValuesBinary", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PropertyValuesBinary
		{
			get
			{
				return this._PropertyValuesBinary;
			}
			set
			{
				if ((this._PropertyValuesBinary != value))
				{
					this.OnPropertyValuesBinaryChanging(value);
					this.SendPropertyChanging();
					this._PropertyValuesBinary = value;
					this.SendPropertyChanged("PropertyValuesBinary");
					this.OnPropertyValuesBinaryChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_Profile", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Profile = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Profile = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.aspnet_SchemaVersions")]
	public partial class aspnet_SchemaVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Feature;
		
		private string _CompatibleSchemaVersion;
		
		private bool _IsCurrentVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeatureChanging(string value);
    partial void OnFeatureChanged();
    partial void OnCompatibleSchemaVersionChanging(string value);
    partial void OnCompatibleSchemaVersionChanged();
    partial void OnIsCurrentVersionChanging(bool value);
    partial void OnIsCurrentVersionChanged();
    #endregion
		
		public aspnet_SchemaVersion()
		{
			OnCreated();
		}
		
		[Column(Storage="_Feature", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Feature
		{
			get
			{
				return this._Feature;
			}
			set
			{
				if ((this._Feature != value))
				{
					this.OnFeatureChanging(value);
					this.SendPropertyChanging();
					this._Feature = value;
					this.SendPropertyChanged("Feature");
					this.OnFeatureChanged();
				}
			}
		}
		
		[Column(Storage="_CompatibleSchemaVersion", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CompatibleSchemaVersion
		{
			get
			{
				return this._CompatibleSchemaVersion;
			}
			set
			{
				if ((this._CompatibleSchemaVersion != value))
				{
					this.OnCompatibleSchemaVersionChanging(value);
					this.SendPropertyChanging();
					this._CompatibleSchemaVersion = value;
					this.SendPropertyChanged("CompatibleSchemaVersion");
					this.OnCompatibleSchemaVersionChanged();
				}
			}
		}
		
		[Column(Storage="_IsCurrentVersion", DbType="Bit NOT NULL")]
		public bool IsCurrentVersion
		{
			get
			{
				return this._IsCurrentVersion;
			}
			set
			{
				if ((this._IsCurrentVersion != value))
				{
					this.OnIsCurrentVersionChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentVersion = value;
					this.SendPropertyChanged("IsCurrentVersion");
					this.OnIsCurrentVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.aspnet_UsersInRoles")]
	public partial class aspnet_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _RoleId;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public aspnet_UsersInRole()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[Association(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.aspnet_WebEvent_Events")]
	public partial class aspnet_WebEvent_Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EventId;
		
		private System.DateTime _EventTimeUtc;
		
		private System.DateTime _EventTime;
		
		private string _EventType;
		
		private decimal _EventSequence;
		
		private decimal _EventOccurrence;
		
		private int _EventCode;
		
		private int _EventDetailCode;
		
		private string _Message;
		
		private string _ApplicationPath;
		
		private string _ApplicationVirtualPath;
		
		private string _MachineName;
		
		private string _RequestUrl;
		
		private string _ExceptionType;
		
		private string _Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(string value);
    partial void OnEventIdChanged();
    partial void OnEventTimeUtcChanging(System.DateTime value);
    partial void OnEventTimeUtcChanged();
    partial void OnEventTimeChanging(System.DateTime value);
    partial void OnEventTimeChanged();
    partial void OnEventTypeChanging(string value);
    partial void OnEventTypeChanged();
    partial void OnEventSequenceChanging(decimal value);
    partial void OnEventSequenceChanged();
    partial void OnEventOccurrenceChanging(decimal value);
    partial void OnEventOccurrenceChanged();
    partial void OnEventCodeChanging(int value);
    partial void OnEventCodeChanged();
    partial void OnEventDetailCodeChanging(int value);
    partial void OnEventDetailCodeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnApplicationPathChanging(string value);
    partial void OnApplicationPathChanged();
    partial void OnApplicationVirtualPathChanging(string value);
    partial void OnApplicationVirtualPathChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnRequestUrlChanging(string value);
    partial void OnRequestUrlChanged();
    partial void OnExceptionTypeChanging(string value);
    partial void OnExceptionTypeChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    #endregion
		
		public aspnet_WebEvent_Event()
		{
			OnCreated();
		}
		
		[Column(Storage="_EventId", DbType="Char(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[Column(Storage="_EventTimeUtc", DbType="DateTime NOT NULL")]
		public System.DateTime EventTimeUtc
		{
			get
			{
				return this._EventTimeUtc;
			}
			set
			{
				if ((this._EventTimeUtc != value))
				{
					this.OnEventTimeUtcChanging(value);
					this.SendPropertyChanging();
					this._EventTimeUtc = value;
					this.SendPropertyChanged("EventTimeUtc");
					this.OnEventTimeUtcChanged();
				}
			}
		}
		
		[Column(Storage="_EventTime", DbType="DateTime NOT NULL")]
		public System.DateTime EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EventType", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[Column(Storage="_EventSequence", DbType="Decimal(19,0) NOT NULL")]
		public decimal EventSequence
		{
			get
			{
				return this._EventSequence;
			}
			set
			{
				if ((this._EventSequence != value))
				{
					this.OnEventSequenceChanging(value);
					this.SendPropertyChanging();
					this._EventSequence = value;
					this.SendPropertyChanged("EventSequence");
					this.OnEventSequenceChanged();
				}
			}
		}
		
		[Column(Storage="_EventOccurrence", DbType="Decimal(19,0) NOT NULL")]
		public decimal EventOccurrence
		{
			get
			{
				return this._EventOccurrence;
			}
			set
			{
				if ((this._EventOccurrence != value))
				{
					this.OnEventOccurrenceChanging(value);
					this.SendPropertyChanging();
					this._EventOccurrence = value;
					this.SendPropertyChanged("EventOccurrence");
					this.OnEventOccurrenceChanged();
				}
			}
		}
		
		[Column(Storage="_EventCode", DbType="Int NOT NULL")]
		public int EventCode
		{
			get
			{
				return this._EventCode;
			}
			set
			{
				if ((this._EventCode != value))
				{
					this.OnEventCodeChanging(value);
					this.SendPropertyChanging();
					this._EventCode = value;
					this.SendPropertyChanged("EventCode");
					this.OnEventCodeChanged();
				}
			}
		}
		
		[Column(Storage="_EventDetailCode", DbType="Int NOT NULL")]
		public int EventDetailCode
		{
			get
			{
				return this._EventDetailCode;
			}
			set
			{
				if ((this._EventDetailCode != value))
				{
					this.OnEventDetailCodeChanging(value);
					this.SendPropertyChanging();
					this._EventDetailCode = value;
					this.SendPropertyChanged("EventDetailCode");
					this.OnEventDetailCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NVarChar(1024)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationPath", DbType="NVarChar(256)")]
		public string ApplicationPath
		{
			get
			{
				return this._ApplicationPath;
			}
			set
			{
				if ((this._ApplicationPath != value))
				{
					this.OnApplicationPathChanging(value);
					this.SendPropertyChanging();
					this._ApplicationPath = value;
					this.SendPropertyChanged("ApplicationPath");
					this.OnApplicationPathChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationVirtualPath", DbType="NVarChar(256)")]
		public string ApplicationVirtualPath
		{
			get
			{
				return this._ApplicationVirtualPath;
			}
			set
			{
				if ((this._ApplicationVirtualPath != value))
				{
					this.OnApplicationVirtualPathChanging(value);
					this.SendPropertyChanging();
					this._ApplicationVirtualPath = value;
					this.SendPropertyChanged("ApplicationVirtualPath");
					this.OnApplicationVirtualPathChanged();
				}
			}
		}
		
		[Column(Storage="_MachineName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[Column(Storage="_RequestUrl", DbType="NVarChar(1024)")]
		public string RequestUrl
		{
			get
			{
				return this._RequestUrl;
			}
			set
			{
				if ((this._RequestUrl != value))
				{
					this.OnRequestUrlChanging(value);
					this.SendPropertyChanging();
					this._RequestUrl = value;
					this.SendPropertyChanged("RequestUrl");
					this.OnRequestUrlChanged();
				}
			}
		}
		
		[Column(Storage="_ExceptionType", DbType="NVarChar(256)")]
		public string ExceptionType
		{
			get
			{
				return this._ExceptionType;
			}
			set
			{
				if ((this._ExceptionType != value))
				{
					this.OnExceptionTypeChanging(value);
					this.SendPropertyChanging();
					this._ExceptionType = value;
					this.SendPropertyChanged("ExceptionType");
					this.OnExceptionTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Details", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[master.Menu_aspnet.Roles]")]
	public partial class master_Menu_aspnet_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _MenuID;
		
		private System.Guid _RoleId;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
		private EntityRef<master_Menu> _master_Menu;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuIDChanging(short value);
    partial void OnMenuIDChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public master_Menu_aspnet_Role()
		{
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			this._master_Menu = default(EntityRef<master_Menu>);
			OnCreated();
		}
		
		[Column(Storage="_MenuID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					if (this._master_Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Role_master_Menu_aspnet_Role", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.master_Menu_aspnet_Roles.Remove(this);
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.master_Menu_aspnet_Roles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		[Association(Name="master_Menu_master_Menu_aspnet_Role", Storage="_master_Menu", ThisKey="MenuID", OtherKey="MenuID", IsForeignKey=true)]
		public master_Menu master_Menu
		{
			get
			{
				return this._master_Menu.Entity;
			}
			set
			{
				master_Menu previousValue = this._master_Menu.Entity;
				if (((previousValue != value) 
							|| (this._master_Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_Menu.Entity = null;
						previousValue.master_Menu_aspnet_Roles.Remove(this);
					}
					this._master_Menu.Entity = value;
					if ((value != null))
					{
						value.master_Menu_aspnet_Roles.Add(this);
						this._MenuID = value.MenuID;
					}
					else
					{
						this._MenuID = default(short);
					}
					this.SendPropertyChanged("master_Menu");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership;
		
		private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers;
		
		private EntityRef<aspnet_Profile> _aspnet_Profile;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntityRef<User_Employee> _User_Employee;
		
		private EntitySet<master_Company_aspnet_User> _master_Company_aspnet_Users;
		
		private EntityRef<master_UserConnMode> _master_UserConnMode;
		
		private EntitySet<master_Database_aspnet_User> _master_Database_aspnet_Users;
		
		private EntityRef<master_UserExtension> _master_UserExtension;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
			this._aspnet_PersonalizationPerUsers = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers));
			this._aspnet_Profile = default(EntityRef<aspnet_Profile>);
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._User_Employee = default(EntityRef<User_Employee>);
			this._master_Company_aspnet_Users = new EntitySet<master_Company_aspnet_User>(new Action<master_Company_aspnet_User>(this.attach_master_Company_aspnet_Users), new Action<master_Company_aspnet_User>(this.detach_master_Company_aspnet_Users));
			this._master_UserConnMode = default(EntityRef<master_UserConnMode>);
			this._master_Database_aspnet_Users = new EntitySet<master_Database_aspnet_User>(new Action<master_Database_aspnet_User>(this.attach_master_Database_aspnet_Users), new Action<master_Database_aspnet_User>(this.detach_master_Database_aspnet_Users));
			this._master_UserExtension = default(EntityRef<master_UserExtension>);
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[Column(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_Membership", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Membership aspnet_Membership
		{
			get
			{
				return this._aspnet_Membership.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Membership.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("aspnet_Membership");
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_PersonalizationPerUser", Storage="_aspnet_PersonalizationPerUsers", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this._aspnet_PersonalizationPerUsers;
			}
			set
			{
				this._aspnet_PersonalizationPerUsers.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_aspnet_Profile", Storage="_aspnet_Profile", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Profile aspnet_Profile
		{
			get
			{
				return this._aspnet_Profile.Entity;
			}
			set
			{
				aspnet_Profile previousValue = this._aspnet_Profile.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Profile.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Profile.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("aspnet_Profile");
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_User_Employee", Storage="_User_Employee", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public User_Employee User_Employee
		{
			get
			{
				return this._User_Employee.Entity;
			}
			set
			{
				User_Employee previousValue = this._User_Employee.Entity;
				if (((previousValue != value) 
							|| (this._User_Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User_Employee.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._User_Employee.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("User_Employee");
				}
			}
		}
		
		[Association(Name="aspnet_User_master_Company_aspnet_User", Storage="_master_Company_aspnet_Users", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<master_Company_aspnet_User> master_Company_aspnet_Users
		{
			get
			{
				return this._master_Company_aspnet_Users;
			}
			set
			{
				this._master_Company_aspnet_Users.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_master_UserConnMode", Storage="_master_UserConnMode", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public master_UserConnMode master_UserConnMode
		{
			get
			{
				return this._master_UserConnMode.Entity;
			}
			set
			{
				master_UserConnMode previousValue = this._master_UserConnMode.Entity;
				if (((previousValue != value) 
							|| (this._master_UserConnMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_UserConnMode.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._master_UserConnMode.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("master_UserConnMode");
				}
			}
		}
		
		[Association(Name="aspnet_User_master_Database_aspnet_User", Storage="_master_Database_aspnet_Users", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<master_Database_aspnet_User> master_Database_aspnet_Users
		{
			get
			{
				return this._master_Database_aspnet_Users;
			}
			set
			{
				this._master_Database_aspnet_Users.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_master_UserExtension", Storage="_master_UserExtension", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public master_UserExtension master_UserExtension
		{
			get
			{
				return this._master_UserExtension.Entity;
			}
			set
			{
				master_UserExtension previousValue = this._master_UserExtension.Entity;
				if (((previousValue != value) 
							|| (this._master_UserExtension.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_UserExtension.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._master_UserExtension.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("master_UserExtension");
				}
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Users.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Users.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_master_Company_aspnet_Users(master_Company_aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_master_Company_aspnet_Users(master_Company_aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_master_Database_aspnet_Users(master_Database_aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_master_Database_aspnet_Users(master_Database_aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
	
	[Table(Name="dbo.User_Employee")]
	public partial class User_Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private string _EmployeeId;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnEmployeeIdChanging(string value);
    partial void OnEmployeeIdChanged();
    #endregion
		
		public User_Employee()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeId", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_User_Employee", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.User_Employee = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.User_Employee = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[master.Company_aspnet.User]")]
	public partial class master_Company_aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CompanyID;
		
		private System.Guid _UserID;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<master_Company> _master_Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(System.Guid value);
    partial void OnCompanyIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    #endregion
		
		public master_Company_aspnet_User()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._master_Company = default(EntityRef<master_Company>);
			OnCreated();
		}
		
		[Column(Storage="_CompanyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._master_Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_master_Company_aspnet_User", Storage="_aspnet_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.master_Company_aspnet_Users.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.master_Company_aspnet_Users.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[Association(Name="master_Company_master_Company_aspnet_User", Storage="_master_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public master_Company master_Company
		{
			get
			{
				return this._master_Company.Entity;
			}
			set
			{
				master_Company previousValue = this._master_Company.Entity;
				if (((previousValue != value) 
							|| (this._master_Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_Company.Entity = null;
						previousValue.master_Company_aspnet_Users.Remove(this);
					}
					this._master_Company.Entity = value;
					if ((value != null))
					{
						value.master_Company_aspnet_Users.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(System.Guid);
					}
					this.SendPropertyChanged("master_Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[master.UserConnMode]")]
	public partial class master_UserConnMode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _CompanyID;
		
		private System.Guid _DatabaseID;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<master_Database> _master_Database;
		
		private EntityRef<master_Company> _master_Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnCompanyIDChanging(System.Guid value);
    partial void OnCompanyIDChanged();
    partial void OnDatabaseIDChanging(System.Guid value);
    partial void OnDatabaseIDChanged();
    #endregion
		
		public master_UserConnMode()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._master_Database = default(EntityRef<master_Database>);
			this._master_Company = default(EntityRef<master_Company>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._master_Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_DatabaseID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DatabaseID
		{
			get
			{
				return this._DatabaseID;
			}
			set
			{
				if ((this._DatabaseID != value))
				{
					if (this._master_Database.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDatabaseIDChanging(value);
					this.SendPropertyChanging();
					this._DatabaseID = value;
					this.SendPropertyChanged("DatabaseID");
					this.OnDatabaseIDChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_master_UserConnMode", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.master_UserConnMode = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.master_UserConnMode = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[Association(Name="master_Database_master_UserConnMode", Storage="_master_Database", ThisKey="DatabaseID", OtherKey="DatabaseID", IsForeignKey=true)]
		public master_Database master_Database
		{
			get
			{
				return this._master_Database.Entity;
			}
			set
			{
				master_Database previousValue = this._master_Database.Entity;
				if (((previousValue != value) 
							|| (this._master_Database.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_Database.Entity = null;
						previousValue.master_UserConnModes.Remove(this);
					}
					this._master_Database.Entity = value;
					if ((value != null))
					{
						value.master_UserConnModes.Add(this);
						this._DatabaseID = value.DatabaseID;
					}
					else
					{
						this._DatabaseID = default(System.Guid);
					}
					this.SendPropertyChanged("master_Database");
				}
			}
		}
		
		[Association(Name="master_Company_master_UserConnMode", Storage="_master_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public master_Company master_Company
		{
			get
			{
				return this._master_Company.Entity;
			}
			set
			{
				master_Company previousValue = this._master_Company.Entity;
				if (((previousValue != value) 
							|| (this._master_Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_Company.Entity = null;
						previousValue.master_UserConnModes.Remove(this);
					}
					this._master_Company.Entity = value;
					if ((value != null))
					{
						value.master_UserConnModes.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(System.Guid);
					}
					this.SendPropertyChanged("master_Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[master.Database_aspnet.User]")]
	public partial class master_Database_aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private System.Guid _DatabaseID;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<master_Database> _master_Database;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnDatabaseIDChanging(System.Guid value);
    partial void OnDatabaseIDChanged();
    #endregion
		
		public master_Database_aspnet_User()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._master_Database = default(EntityRef<master_Database>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_DatabaseID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DatabaseID
		{
			get
			{
				return this._DatabaseID;
			}
			set
			{
				if ((this._DatabaseID != value))
				{
					if (this._master_Database.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDatabaseIDChanging(value);
					this.SendPropertyChanging();
					this._DatabaseID = value;
					this.SendPropertyChanged("DatabaseID");
					this.OnDatabaseIDChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_master_Database_aspnet_User", Storage="_aspnet_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.master_Database_aspnet_Users.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.master_Database_aspnet_Users.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[Association(Name="master_Database_master_Database_aspnet_User", Storage="_master_Database", ThisKey="DatabaseID", OtherKey="DatabaseID", IsForeignKey=true)]
		public master_Database master_Database
		{
			get
			{
				return this._master_Database.Entity;
			}
			set
			{
				master_Database previousValue = this._master_Database.Entity;
				if (((previousValue != value) 
							|| (this._master_Database.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_Database.Entity = null;
						previousValue.master_Database_aspnet_Users.Remove(this);
					}
					this._master_Database.Entity = value;
					if ((value != null))
					{
						value.master_Database_aspnet_Users.Add(this);
						this._DatabaseID = value.DatabaseID;
					}
					else
					{
						this._DatabaseID = default(System.Guid);
					}
					this.SendPropertyChanged("master_Database");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[master.Company_master.Database]")]
	public partial class master_Company_master_Database : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CompanyID;
		
		private System.Guid _DatabaseID;
		
		private EntityRef<master_Database> _master_Database;
		
		private EntityRef<master_Company> _master_Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(System.Guid value);
    partial void OnCompanyIDChanged();
    partial void OnDatabaseIDChanging(System.Guid value);
    partial void OnDatabaseIDChanged();
    #endregion
		
		public master_Company_master_Database()
		{
			this._master_Database = default(EntityRef<master_Database>);
			this._master_Company = default(EntityRef<master_Company>);
			OnCreated();
		}
		
		[Column(Storage="_CompanyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._master_Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_DatabaseID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DatabaseID
		{
			get
			{
				return this._DatabaseID;
			}
			set
			{
				if ((this._DatabaseID != value))
				{
					if (this._master_Database.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDatabaseIDChanging(value);
					this.SendPropertyChanging();
					this._DatabaseID = value;
					this.SendPropertyChanged("DatabaseID");
					this.OnDatabaseIDChanged();
				}
			}
		}
		
		[Association(Name="master_Database_master_Company_master_Database", Storage="_master_Database", ThisKey="DatabaseID", OtherKey="DatabaseID", IsForeignKey=true)]
		public master_Database master_Database
		{
			get
			{
				return this._master_Database.Entity;
			}
			set
			{
				master_Database previousValue = this._master_Database.Entity;
				if (((previousValue != value) 
							|| (this._master_Database.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_Database.Entity = null;
						previousValue.master_Company_master_Database = null;
					}
					this._master_Database.Entity = value;
					if ((value != null))
					{
						value.master_Company_master_Database = this;
						this._DatabaseID = value.DatabaseID;
					}
					else
					{
						this._DatabaseID = default(System.Guid);
					}
					this.SendPropertyChanged("master_Database");
				}
			}
		}
		
		[Association(Name="master_Company_master_Company_master_Database", Storage="_master_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public master_Company master_Company
		{
			get
			{
				return this._master_Company.Entity;
			}
			set
			{
				master_Company previousValue = this._master_Company.Entity;
				if (((previousValue != value) 
							|| (this._master_Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_Company.Entity = null;
						previousValue.master_Company_master_Databases.Remove(this);
					}
					this._master_Company.Entity = value;
					if ((value != null))
					{
						value.master_Company_master_Databases.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(System.Guid);
					}
					this.SendPropertyChanged("master_Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.aspnet_Roles")]
	public partial class aspnet_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _RoleId;
		
		private string _RoleName;
		
		private string _LoweredRoleName;
		
		private string _Description;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntitySet<master_Menu_aspnet_Role> _master_Menu_aspnet_Roles;
		
		private EntityRef<master_Role> _master_Role;
		
		private EntitySet<master_Company_aspnet_Role> _master_Company_aspnet_Roles;
		
		private EntitySet<master_RolePermission> _master_RolePermissions;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnLoweredRoleNameChanging(string value);
    partial void OnLoweredRoleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Role()
		{
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._master_Menu_aspnet_Roles = new EntitySet<master_Menu_aspnet_Role>(new Action<master_Menu_aspnet_Role>(this.attach_master_Menu_aspnet_Roles), new Action<master_Menu_aspnet_Role>(this.detach_master_Menu_aspnet_Roles));
			this._master_Role = default(EntityRef<master_Role>);
			this._master_Company_aspnet_Roles = new EntitySet<master_Company_aspnet_Role>(new Action<master_Company_aspnet_Role>(this.attach_master_Company_aspnet_Roles), new Action<master_Company_aspnet_Role>(this.detach_master_Company_aspnet_Roles));
			this._master_RolePermissions = new EntitySet<master_RolePermission>(new Action<master_RolePermission>(this.attach_master_RolePermissions), new Action<master_RolePermission>(this.detach_master_RolePermissions));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredRoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredRoleName
		{
			get
			{
				return this._LoweredRoleName;
			}
			set
			{
				if ((this._LoweredRoleName != value))
				{
					this.OnLoweredRoleNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredRoleName = value;
					this.SendPropertyChanged("LoweredRoleName");
					this.OnLoweredRoleNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Role_master_Menu_aspnet_Role", Storage="_master_Menu_aspnet_Roles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<master_Menu_aspnet_Role> master_Menu_aspnet_Roles
		{
			get
			{
				return this._master_Menu_aspnet_Roles;
			}
			set
			{
				this._master_Menu_aspnet_Roles.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Role_master_Role", Storage="_master_Role", ThisKey="RoleId", OtherKey="RoleId", IsUnique=true, IsForeignKey=false)]
		public master_Role master_Role
		{
			get
			{
				return this._master_Role.Entity;
			}
			set
			{
				master_Role previousValue = this._master_Role.Entity;
				if (((previousValue != value) 
							|| (this._master_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_Role.Entity = null;
						previousValue.aspnet_Role = null;
					}
					this._master_Role.Entity = value;
					if ((value != null))
					{
						value.aspnet_Role = this;
					}
					this.SendPropertyChanged("master_Role");
				}
			}
		}
		
		[Association(Name="aspnet_Role_master_Company_aspnet_Role", Storage="_master_Company_aspnet_Roles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<master_Company_aspnet_Role> master_Company_aspnet_Roles
		{
			get
			{
				return this._master_Company_aspnet_Roles;
			}
			set
			{
				this._master_Company_aspnet_Roles.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Role_master_RolePermission", Storage="_master_RolePermissions", ThisKey="RoleId", OtherKey="RoleID")]
		public EntitySet<master_RolePermission> master_RolePermissions
		{
			get
			{
				return this._master_RolePermissions;
			}
			set
			{
				this._master_RolePermissions.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Roles.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Roles.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = null;
		}
		
		private void attach_master_Menu_aspnet_Roles(master_Menu_aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = this;
		}
		
		private void detach_master_Menu_aspnet_Roles(master_Menu_aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = null;
		}
		
		private void attach_master_Company_aspnet_Roles(master_Company_aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = this;
		}
		
		private void detach_master_Company_aspnet_Roles(master_Company_aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = null;
		}
		
		private void attach_master_RolePermissions(master_RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = this;
		}
		
		private void detach_master_RolePermissions(master_RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = null;
		}
	}
	
	[Table(Name="dbo.[master.Role]")]
	public partial class master_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RoleId;
		
		private bool _SystemRole;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnSystemRoleChanging(bool value);
    partial void OnSystemRoleChanged();
    #endregion
		
		public master_Role()
		{
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			OnCreated();
		}
		
		[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_SystemRole", DbType="Bit NOT NULL")]
		public bool SystemRole
		{
			get
			{
				return this._SystemRole;
			}
			set
			{
				if ((this._SystemRole != value))
				{
					this.OnSystemRoleChanging(value);
					this.SendPropertyChanging();
					this._SystemRole = value;
					this.SendPropertyChanged("SystemRole");
					this.OnSystemRoleChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Role_master_Role", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.master_Role = null;
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.master_Role = this;
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[master.PermissionTemplate]")]
	public partial class master_PermissionTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _MenuID;
		
		private bool _Add;
		
		private bool _Edit;
		
		private bool _Delete;
		
		private bool _View;
		
		private bool _GetApproval;
		
		private bool _Approve;
		
		private bool _Posting;
		
		private bool _Unposting;
		
		private bool _PrintPreview;
		
		private bool _TaxPreview;
		
		private bool _Access;
		
		private bool _Close;
		
		private bool _Generate;
		
		private bool _Revisi;
		
		private EntityRef<master_Menu> _master_Menu;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuIDChanging(short value);
    partial void OnMenuIDChanged();
    partial void OnAddChanging(bool value);
    partial void OnAddChanged();
    partial void OnEditChanging(bool value);
    partial void OnEditChanged();
    partial void OnDeleteChanging(bool value);
    partial void OnDeleteChanged();
    partial void OnViewChanging(bool value);
    partial void OnViewChanged();
    partial void OnGetApprovalChanging(bool value);
    partial void OnGetApprovalChanged();
    partial void OnApproveChanging(bool value);
    partial void OnApproveChanged();
    partial void OnPostingChanging(bool value);
    partial void OnPostingChanged();
    partial void OnUnpostingChanging(bool value);
    partial void OnUnpostingChanged();
    partial void OnPrintPreviewChanging(bool value);
    partial void OnPrintPreviewChanged();
    partial void OnTaxPreviewChanging(bool value);
    partial void OnTaxPreviewChanged();
    partial void OnAccessChanging(bool value);
    partial void OnAccessChanged();
    partial void OnCloseChanging(bool value);
    partial void OnCloseChanged();
    partial void OnGenerateChanging(bool value);
    partial void OnGenerateChanged();
    partial void OnRevisiChanging(bool value);
    partial void OnRevisiChanged();
    #endregion
		
		public master_PermissionTemplate()
		{
			this._master_Menu = default(EntityRef<master_Menu>);
			OnCreated();
		}
		
		[Column(Storage="_MenuID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					if (this._master_Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[Column(Name="[Add]", Storage="_Add", DbType="Bit NOT NULL")]
		public bool Add
		{
			get
			{
				return this._Add;
			}
			set
			{
				if ((this._Add != value))
				{
					this.OnAddChanging(value);
					this.SendPropertyChanging();
					this._Add = value;
					this.SendPropertyChanged("Add");
					this.OnAddChanged();
				}
			}
		}
		
		[Column(Storage="_Edit", DbType="Bit NOT NULL")]
		public bool Edit
		{
			get
			{
				return this._Edit;
			}
			set
			{
				if ((this._Edit != value))
				{
					this.OnEditChanging(value);
					this.SendPropertyChanging();
					this._Edit = value;
					this.SendPropertyChanged("Edit");
					this.OnEditChanged();
				}
			}
		}
		
		[Column(Name="[Delete]", Storage="_Delete", DbType="Bit NOT NULL")]
		public bool Delete
		{
			get
			{
				return this._Delete;
			}
			set
			{
				if ((this._Delete != value))
				{
					this.OnDeleteChanging(value);
					this.SendPropertyChanging();
					this._Delete = value;
					this.SendPropertyChanged("Delete");
					this.OnDeleteChanged();
				}
			}
		}
		
		[Column(Name="[View]", Storage="_View", DbType="Bit NOT NULL")]
		public bool View
		{
			get
			{
				return this._View;
			}
			set
			{
				if ((this._View != value))
				{
					this.OnViewChanging(value);
					this.SendPropertyChanging();
					this._View = value;
					this.SendPropertyChanged("View");
					this.OnViewChanged();
				}
			}
		}
		
		[Column(Storage="_GetApproval", DbType="Bit NOT NULL")]
		public bool GetApproval
		{
			get
			{
				return this._GetApproval;
			}
			set
			{
				if ((this._GetApproval != value))
				{
					this.OnGetApprovalChanging(value);
					this.SendPropertyChanging();
					this._GetApproval = value;
					this.SendPropertyChanged("GetApproval");
					this.OnGetApprovalChanged();
				}
			}
		}
		
		[Column(Storage="_Approve", DbType="Bit NOT NULL")]
		public bool Approve
		{
			get
			{
				return this._Approve;
			}
			set
			{
				if ((this._Approve != value))
				{
					this.OnApproveChanging(value);
					this.SendPropertyChanging();
					this._Approve = value;
					this.SendPropertyChanged("Approve");
					this.OnApproveChanged();
				}
			}
		}
		
		[Column(Storage="_Posting", DbType="Bit NOT NULL")]
		public bool Posting
		{
			get
			{
				return this._Posting;
			}
			set
			{
				if ((this._Posting != value))
				{
					this.OnPostingChanging(value);
					this.SendPropertyChanging();
					this._Posting = value;
					this.SendPropertyChanged("Posting");
					this.OnPostingChanged();
				}
			}
		}
		
		[Column(Storage="_Unposting", DbType="Bit NOT NULL")]
		public bool Unposting
		{
			get
			{
				return this._Unposting;
			}
			set
			{
				if ((this._Unposting != value))
				{
					this.OnUnpostingChanging(value);
					this.SendPropertyChanging();
					this._Unposting = value;
					this.SendPropertyChanged("Unposting");
					this.OnUnpostingChanged();
				}
			}
		}
		
		[Column(Storage="_PrintPreview", DbType="Bit NOT NULL")]
		public bool PrintPreview
		{
			get
			{
				return this._PrintPreview;
			}
			set
			{
				if ((this._PrintPreview != value))
				{
					this.OnPrintPreviewChanging(value);
					this.SendPropertyChanging();
					this._PrintPreview = value;
					this.SendPropertyChanged("PrintPreview");
					this.OnPrintPreviewChanged();
				}
			}
		}
		
		[Column(Storage="_TaxPreview", DbType="Bit NOT NULL")]
		public bool TaxPreview
		{
			get
			{
				return this._TaxPreview;
			}
			set
			{
				if ((this._TaxPreview != value))
				{
					this.OnTaxPreviewChanging(value);
					this.SendPropertyChanging();
					this._TaxPreview = value;
					this.SendPropertyChanged("TaxPreview");
					this.OnTaxPreviewChanged();
				}
			}
		}
		
		[Column(Storage="_Access", DbType="Bit NOT NULL")]
		public bool Access
		{
			get
			{
				return this._Access;
			}
			set
			{
				if ((this._Access != value))
				{
					this.OnAccessChanging(value);
					this.SendPropertyChanging();
					this._Access = value;
					this.SendPropertyChanged("Access");
					this.OnAccessChanged();
				}
			}
		}
		
		[Column(Name="[Close]", Storage="_Close", DbType="Bit NOT NULL")]
		public bool Close
		{
			get
			{
				return this._Close;
			}
			set
			{
				if ((this._Close != value))
				{
					this.OnCloseChanging(value);
					this.SendPropertyChanging();
					this._Close = value;
					this.SendPropertyChanged("Close");
					this.OnCloseChanged();
				}
			}
		}
		
		[Column(Storage="_Generate", DbType="Bit NOT NULL")]
		public bool Generate
		{
			get
			{
				return this._Generate;
			}
			set
			{
				if ((this._Generate != value))
				{
					this.OnGenerateChanging(value);
					this.SendPropertyChanging();
					this._Generate = value;
					this.SendPropertyChanged("Generate");
					this.OnGenerateChanged();
				}
			}
		}
		
		[Column(Storage="_Revisi", DbType="Bit NOT NULL")]
		public bool Revisi
		{
			get
			{
				return this._Revisi;
			}
			set
			{
				if ((this._Revisi != value))
				{
					this.OnRevisiChanging(value);
					this.SendPropertyChanging();
					this._Revisi = value;
					this.SendPropertyChanged("Revisi");
					this.OnRevisiChanged();
				}
			}
		}
		
		[Association(Name="master_Menu_master_PermissionTemplate", Storage="_master_Menu", ThisKey="MenuID", OtherKey="MenuID", IsForeignKey=true)]
		public master_Menu master_Menu
		{
			get
			{
				return this._master_Menu.Entity;
			}
			set
			{
				master_Menu previousValue = this._master_Menu.Entity;
				if (((previousValue != value) 
							|| (this._master_Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_Menu.Entity = null;
						previousValue.master_PermissionTemplate = null;
					}
					this._master_Menu.Entity = value;
					if ((value != null))
					{
						value.master_PermissionTemplate = this;
						this._MenuID = value.MenuID;
					}
					else
					{
						this._MenuID = default(short);
					}
					this.SendPropertyChanged("master_Menu");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[master.Company_aspnet_Role]")]
	public partial class master_Company_aspnet_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CompanyID;
		
		private System.Guid _RoleId;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
		private EntityRef<master_Company> _master_Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(System.Guid value);
    partial void OnCompanyIDChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public master_Company_aspnet_Role()
		{
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			this._master_Company = default(EntityRef<master_Company>);
			OnCreated();
		}
		
		[Column(Storage="_CompanyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._master_Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Role_master_Company_aspnet_Role", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.master_Company_aspnet_Roles.Remove(this);
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.master_Company_aspnet_Roles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		[Association(Name="master_Company_master_Company_aspnet_Role", Storage="_master_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public master_Company master_Company
		{
			get
			{
				return this._master_Company.Entity;
			}
			set
			{
				master_Company previousValue = this._master_Company.Entity;
				if (((previousValue != value) 
							|| (this._master_Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_Company.Entity = null;
						previousValue.master_Company_aspnet_Roles.Remove(this);
					}
					this._master_Company.Entity = value;
					if ((value != null))
					{
						value.master_Company_aspnet_Roles.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(System.Guid);
					}
					this.SendPropertyChanged("master_Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[master.RolePermission]")]
	public partial class master_RolePermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RoleID;
		
		private short _MenuID;
		
		private byte _Add;
		
		private byte _Edit;
		
		private byte _Delete;
		
		private byte _View;
		
		private byte _GetApproval;
		
		private byte _Approve;
		
		private byte _Posting;
		
		private byte _Unposting;
		
		private byte _PrintPreview;
		
		private byte _TaxPreview;
		
		private byte _Close;
		
		private byte _Access;
		
		private byte _Generate;
		
		private byte _Revisi;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
		private EntityRef<master_Menu> _master_Menu;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(System.Guid value);
    partial void OnRoleIDChanged();
    partial void OnMenuIDChanging(short value);
    partial void OnMenuIDChanged();
    partial void OnAddChanging(byte value);
    partial void OnAddChanged();
    partial void OnEditChanging(byte value);
    partial void OnEditChanged();
    partial void OnDeleteChanging(byte value);
    partial void OnDeleteChanged();
    partial void OnViewChanging(byte value);
    partial void OnViewChanged();
    partial void OnGetApprovalChanging(byte value);
    partial void OnGetApprovalChanged();
    partial void OnApproveChanging(byte value);
    partial void OnApproveChanged();
    partial void OnPostingChanging(byte value);
    partial void OnPostingChanged();
    partial void OnUnpostingChanging(byte value);
    partial void OnUnpostingChanged();
    partial void OnPrintPreviewChanging(byte value);
    partial void OnPrintPreviewChanged();
    partial void OnTaxPreviewChanging(byte value);
    partial void OnTaxPreviewChanged();
    partial void OnCloseChanging(byte value);
    partial void OnCloseChanged();
    partial void OnAccessChanging(byte value);
    partial void OnAccessChanged();
    partial void OnGenerateChanging(byte value);
    partial void OnGenerateChanged();
    partial void OnRevisiChanging(byte value);
    partial void OnRevisiChanged();
    #endregion
		
		public master_RolePermission()
		{
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			this._master_Menu = default(EntityRef<master_Menu>);
			OnCreated();
		}
		
		[Column(Storage="_RoleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_MenuID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					if (this._master_Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[Column(Name="[Add]", Storage="_Add", DbType="TinyInt NOT NULL")]
		public byte Add
		{
			get
			{
				return this._Add;
			}
			set
			{
				if ((this._Add != value))
				{
					this.OnAddChanging(value);
					this.SendPropertyChanging();
					this._Add = value;
					this.SendPropertyChanged("Add");
					this.OnAddChanged();
				}
			}
		}
		
		[Column(Storage="_Edit", DbType="TinyInt NOT NULL")]
		public byte Edit
		{
			get
			{
				return this._Edit;
			}
			set
			{
				if ((this._Edit != value))
				{
					this.OnEditChanging(value);
					this.SendPropertyChanging();
					this._Edit = value;
					this.SendPropertyChanged("Edit");
					this.OnEditChanged();
				}
			}
		}
		
		[Column(Name="[Delete]", Storage="_Delete", DbType="TinyInt NOT NULL")]
		public byte Delete
		{
			get
			{
				return this._Delete;
			}
			set
			{
				if ((this._Delete != value))
				{
					this.OnDeleteChanging(value);
					this.SendPropertyChanging();
					this._Delete = value;
					this.SendPropertyChanged("Delete");
					this.OnDeleteChanged();
				}
			}
		}
		
		[Column(Name="[View]", Storage="_View", DbType="TinyInt NOT NULL")]
		public byte View
		{
			get
			{
				return this._View;
			}
			set
			{
				if ((this._View != value))
				{
					this.OnViewChanging(value);
					this.SendPropertyChanging();
					this._View = value;
					this.SendPropertyChanged("View");
					this.OnViewChanged();
				}
			}
		}
		
		[Column(Storage="_GetApproval", DbType="TinyInt NOT NULL")]
		public byte GetApproval
		{
			get
			{
				return this._GetApproval;
			}
			set
			{
				if ((this._GetApproval != value))
				{
					this.OnGetApprovalChanging(value);
					this.SendPropertyChanging();
					this._GetApproval = value;
					this.SendPropertyChanged("GetApproval");
					this.OnGetApprovalChanged();
				}
			}
		}
		
		[Column(Storage="_Approve", DbType="TinyInt NOT NULL")]
		public byte Approve
		{
			get
			{
				return this._Approve;
			}
			set
			{
				if ((this._Approve != value))
				{
					this.OnApproveChanging(value);
					this.SendPropertyChanging();
					this._Approve = value;
					this.SendPropertyChanged("Approve");
					this.OnApproveChanged();
				}
			}
		}
		
		[Column(Storage="_Posting", DbType="TinyInt NOT NULL")]
		public byte Posting
		{
			get
			{
				return this._Posting;
			}
			set
			{
				if ((this._Posting != value))
				{
					this.OnPostingChanging(value);
					this.SendPropertyChanging();
					this._Posting = value;
					this.SendPropertyChanged("Posting");
					this.OnPostingChanged();
				}
			}
		}
		
		[Column(Storage="_Unposting", DbType="TinyInt NOT NULL")]
		public byte Unposting
		{
			get
			{
				return this._Unposting;
			}
			set
			{
				if ((this._Unposting != value))
				{
					this.OnUnpostingChanging(value);
					this.SendPropertyChanging();
					this._Unposting = value;
					this.SendPropertyChanged("Unposting");
					this.OnUnpostingChanged();
				}
			}
		}
		
		[Column(Storage="_PrintPreview", DbType="TinyInt NOT NULL")]
		public byte PrintPreview
		{
			get
			{
				return this._PrintPreview;
			}
			set
			{
				if ((this._PrintPreview != value))
				{
					this.OnPrintPreviewChanging(value);
					this.SendPropertyChanging();
					this._PrintPreview = value;
					this.SendPropertyChanged("PrintPreview");
					this.OnPrintPreviewChanged();
				}
			}
		}
		
		[Column(Storage="_TaxPreview", DbType="TinyInt NOT NULL")]
		public byte TaxPreview
		{
			get
			{
				return this._TaxPreview;
			}
			set
			{
				if ((this._TaxPreview != value))
				{
					this.OnTaxPreviewChanging(value);
					this.SendPropertyChanging();
					this._TaxPreview = value;
					this.SendPropertyChanged("TaxPreview");
					this.OnTaxPreviewChanged();
				}
			}
		}
		
		[Column(Name="[Close]", Storage="_Close", DbType="TinyInt NOT NULL")]
		public byte Close
		{
			get
			{
				return this._Close;
			}
			set
			{
				if ((this._Close != value))
				{
					this.OnCloseChanging(value);
					this.SendPropertyChanging();
					this._Close = value;
					this.SendPropertyChanged("Close");
					this.OnCloseChanged();
				}
			}
		}
		
		[Column(Storage="_Access", DbType="TinyInt NOT NULL")]
		public byte Access
		{
			get
			{
				return this._Access;
			}
			set
			{
				if ((this._Access != value))
				{
					this.OnAccessChanging(value);
					this.SendPropertyChanging();
					this._Access = value;
					this.SendPropertyChanged("Access");
					this.OnAccessChanged();
				}
			}
		}
		
		[Column(Storage="_Generate", DbType="TinyInt NOT NULL")]
		public byte Generate
		{
			get
			{
				return this._Generate;
			}
			set
			{
				if ((this._Generate != value))
				{
					this.OnGenerateChanging(value);
					this.SendPropertyChanging();
					this._Generate = value;
					this.SendPropertyChanged("Generate");
					this.OnGenerateChanged();
				}
			}
		}
		
		[Column(Storage="_Revisi", DbType="TinyInt NOT NULL")]
		public byte Revisi
		{
			get
			{
				return this._Revisi;
			}
			set
			{
				if ((this._Revisi != value))
				{
					this.OnRevisiChanging(value);
					this.SendPropertyChanging();
					this._Revisi = value;
					this.SendPropertyChanged("Revisi");
					this.OnRevisiChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Role_master_RolePermission", Storage="_aspnet_Role", ThisKey="RoleID", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.master_RolePermissions.Remove(this);
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.master_RolePermissions.Add(this);
						this._RoleID = value.RoleId;
					}
					else
					{
						this._RoleID = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		[Association(Name="master_Menu_master_RolePermission", Storage="_master_Menu", ThisKey="MenuID", OtherKey="MenuID", IsForeignKey=true)]
		public master_Menu master_Menu
		{
			get
			{
				return this._master_Menu.Entity;
			}
			set
			{
				master_Menu previousValue = this._master_Menu.Entity;
				if (((previousValue != value) 
							|| (this._master_Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_Menu.Entity = null;
						previousValue.master_RolePermissions.Remove(this);
					}
					this._master_Menu.Entity = value;
					if ((value != null))
					{
						value.master_RolePermissions.Add(this);
						this._MenuID = value.MenuID;
					}
					else
					{
						this._MenuID = default(short);
					}
					this.SendPropertyChanged("master_Menu");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[master.Database]")]
	public partial class master_Database : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DatabaseID;
		
		private string _Name;
		
		private string _Server;
		
		private string _UID;
		
		private string _PWD;
		
		private byte _Status;
		
		private EntitySet<master_UserConnMode> _master_UserConnModes;
		
		private EntitySet<master_Database_aspnet_User> _master_Database_aspnet_Users;
		
		private EntityRef<master_Company_master_Database> _master_Company_master_Database;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDatabaseIDChanging(System.Guid value);
    partial void OnDatabaseIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnServerChanging(string value);
    partial void OnServerChanged();
    partial void OnUIDChanging(string value);
    partial void OnUIDChanged();
    partial void OnPWDChanging(string value);
    partial void OnPWDChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    #endregion
		
		public master_Database()
		{
			this._master_UserConnModes = new EntitySet<master_UserConnMode>(new Action<master_UserConnMode>(this.attach_master_UserConnModes), new Action<master_UserConnMode>(this.detach_master_UserConnModes));
			this._master_Database_aspnet_Users = new EntitySet<master_Database_aspnet_User>(new Action<master_Database_aspnet_User>(this.attach_master_Database_aspnet_Users), new Action<master_Database_aspnet_User>(this.detach_master_Database_aspnet_Users));
			this._master_Company_master_Database = default(EntityRef<master_Company_master_Database>);
			OnCreated();
		}
		
		[Column(Storage="_DatabaseID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DatabaseID
		{
			get
			{
				return this._DatabaseID;
			}
			set
			{
				if ((this._DatabaseID != value))
				{
					this.OnDatabaseIDChanging(value);
					this.SendPropertyChanging();
					this._DatabaseID = value;
					this.SendPropertyChanged("DatabaseID");
					this.OnDatabaseIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Server", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Server
		{
			get
			{
				return this._Server;
			}
			set
			{
				if ((this._Server != value))
				{
					this.OnServerChanging(value);
					this.SendPropertyChanging();
					this._Server = value;
					this.SendPropertyChanged("Server");
					this.OnServerChanged();
				}
			}
		}
		
		[Column(Storage="_UID", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[Column(Storage="_PWD", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string PWD
		{
			get
			{
				return this._PWD;
			}
			set
			{
				if ((this._PWD != value))
				{
					this.OnPWDChanging(value);
					this.SendPropertyChanging();
					this._PWD = value;
					this.SendPropertyChanged("PWD");
					this.OnPWDChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="master_Database_master_UserConnMode", Storage="_master_UserConnModes", ThisKey="DatabaseID", OtherKey="DatabaseID")]
		public EntitySet<master_UserConnMode> master_UserConnModes
		{
			get
			{
				return this._master_UserConnModes;
			}
			set
			{
				this._master_UserConnModes.Assign(value);
			}
		}
		
		[Association(Name="master_Database_master_Database_aspnet_User", Storage="_master_Database_aspnet_Users", ThisKey="DatabaseID", OtherKey="DatabaseID")]
		public EntitySet<master_Database_aspnet_User> master_Database_aspnet_Users
		{
			get
			{
				return this._master_Database_aspnet_Users;
			}
			set
			{
				this._master_Database_aspnet_Users.Assign(value);
			}
		}
		
		[Association(Name="master_Database_master_Company_master_Database", Storage="_master_Company_master_Database", ThisKey="DatabaseID", OtherKey="DatabaseID", IsUnique=true, IsForeignKey=false)]
		public master_Company_master_Database master_Company_master_Database
		{
			get
			{
				return this._master_Company_master_Database.Entity;
			}
			set
			{
				master_Company_master_Database previousValue = this._master_Company_master_Database.Entity;
				if (((previousValue != value) 
							|| (this._master_Company_master_Database.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_Company_master_Database.Entity = null;
						previousValue.master_Database = null;
					}
					this._master_Company_master_Database.Entity = value;
					if ((value != null))
					{
						value.master_Database = this;
					}
					this.SendPropertyChanged("master_Company_master_Database");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_master_UserConnModes(master_UserConnMode entity)
		{
			this.SendPropertyChanging();
			entity.master_Database = this;
		}
		
		private void detach_master_UserConnModes(master_UserConnMode entity)
		{
			this.SendPropertyChanging();
			entity.master_Database = null;
		}
		
		private void attach_master_Database_aspnet_Users(master_Database_aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.master_Database = this;
		}
		
		private void detach_master_Database_aspnet_Users(master_Database_aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.master_Database = null;
		}
	}
	
	[Table(Name="dbo.[master.RoleMenu]")]
	public partial class master_RoleMenu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RoleId;
		
		private short _MenuId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnMenuIdChanging(short value);
    partial void OnMenuIdChanged();
    #endregion
		
		public master_RoleMenu()
		{
			OnCreated();
		}
		
		[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_MenuId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MenuId
		{
			get
			{
				return this._MenuId;
			}
			set
			{
				if ((this._MenuId != value))
				{
					this.OnMenuIdChanging(value);
					this.SendPropertyChanging();
					this._MenuId = value;
					this.SendPropertyChanged("MenuId");
					this.OnMenuIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[master.UserExtension]")]
	public partial class master_UserExtension : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private string _password;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public master_UserExtension()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_master_UserExtension", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.master_UserExtension = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.master_UserExtension = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[master.CompanyMenu]")]
	public partial class master_CompanyMenu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CompanyId;
		
		private short _MenuId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(System.Guid value);
    partial void OnCompanyIdChanged();
    partial void OnMenuIdChanging(short value);
    partial void OnMenuIdChanged();
    #endregion
		
		public master_CompanyMenu()
		{
			OnCreated();
		}
		
		[Column(Storage="_CompanyId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[Column(Storage="_MenuId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MenuId
		{
			get
			{
				return this._MenuId;
			}
			set
			{
				if ((this._MenuId != value))
				{
					this.OnMenuIdChanging(value);
					this.SendPropertyChanging();
					this._MenuId = value;
					this.SendPropertyChanged("MenuId");
					this.OnMenuIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsReminder")]
	public partial class MsReminder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ReminderCode;
		
		private string _ReminderName;
		
		private System.Nullable<int> _MenuID;
		
		private string _TableName;
		
		private string _FgCondition;
		
		private string _Path;
		
		private string _ExecuteName;
		
		private string _ButtonText;
		
		private string _ReminderType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReminderCodeChanging(string value);
    partial void OnReminderCodeChanged();
    partial void OnReminderNameChanging(string value);
    partial void OnReminderNameChanged();
    partial void OnMenuIDChanging(System.Nullable<int> value);
    partial void OnMenuIDChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnFgConditionChanging(string value);
    partial void OnFgConditionChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnExecuteNameChanging(string value);
    partial void OnExecuteNameChanged();
    partial void OnButtonTextChanging(string value);
    partial void OnButtonTextChanged();
    partial void OnReminderTypeChanging(string value);
    partial void OnReminderTypeChanged();
    #endregion
		
		public MsReminder()
		{
			OnCreated();
		}
		
		[Column(Storage="_ReminderCode", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ReminderCode
		{
			get
			{
				return this._ReminderCode;
			}
			set
			{
				if ((this._ReminderCode != value))
				{
					this.OnReminderCodeChanging(value);
					this.SendPropertyChanging();
					this._ReminderCode = value;
					this.SendPropertyChanged("ReminderCode");
					this.OnReminderCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ReminderName", DbType="VarChar(50)")]
		public string ReminderName
		{
			get
			{
				return this._ReminderName;
			}
			set
			{
				if ((this._ReminderName != value))
				{
					this.OnReminderNameChanging(value);
					this.SendPropertyChanging();
					this._ReminderName = value;
					this.SendPropertyChanged("ReminderName");
					this.OnReminderNameChanged();
				}
			}
		}
		
		[Column(Storage="_MenuID", DbType="Int")]
		public System.Nullable<int> MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[Column(Storage="_TableName", DbType="VarChar(50)")]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[Column(Storage="_FgCondition", DbType="VarChar(1000)")]
		public string FgCondition
		{
			get
			{
				return this._FgCondition;
			}
			set
			{
				if ((this._FgCondition != value))
				{
					this.OnFgConditionChanging(value);
					this.SendPropertyChanging();
					this._FgCondition = value;
					this.SendPropertyChanged("FgCondition");
					this.OnFgConditionChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="VarChar(1000)")]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Storage="_ExecuteName", DbType="VarChar(50)")]
		public string ExecuteName
		{
			get
			{
				return this._ExecuteName;
			}
			set
			{
				if ((this._ExecuteName != value))
				{
					this.OnExecuteNameChanging(value);
					this.SendPropertyChanging();
					this._ExecuteName = value;
					this.SendPropertyChanged("ExecuteName");
					this.OnExecuteNameChanged();
				}
			}
		}
		
		[Column(Storage="_ButtonText", DbType="VarChar(50)")]
		public string ButtonText
		{
			get
			{
				return this._ButtonText;
			}
			set
			{
				if ((this._ButtonText != value))
				{
					this.OnButtonTextChanging(value);
					this.SendPropertyChanging();
					this._ButtonText = value;
					this.SendPropertyChanged("ButtonText");
					this.OnButtonTextChanged();
				}
			}
		}
		
		[Column(Storage="_ReminderType", DbType="VarChar(50)")]
		public string ReminderType
		{
			get
			{
				return this._ReminderType;
			}
			set
			{
				if ((this._ReminderType != value))
				{
					this.OnReminderTypeChanging(value);
					this.SendPropertyChanging();
					this._ReminderType = value;
					this.SendPropertyChanged("ReminderType");
					this.OnReminderTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsReminderMapping")]
	public partial class MsReminderMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ReminderCode;
		
		private System.Guid _RoleId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReminderCodeChanging(string value);
    partial void OnReminderCodeChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public MsReminderMapping()
		{
			OnCreated();
		}
		
		[Column(Storage="_ReminderCode", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ReminderCode
		{
			get
			{
				return this._ReminderCode;
			}
			set
			{
				if ((this._ReminderCode != value))
				{
					this.OnReminderCodeChanging(value);
					this.SendPropertyChanging();
					this._ReminderCode = value;
					this.SendPropertyChanged("ReminderCode");
					this.OnReminderCodeChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[master.ReportListTemplate]")]
	public partial class master_ReportListTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ReportType;
		
		private string _ReportGroupID;
		
		private int _SortNo;
		
		private string _ReportName;
		
		private string _ReportPath;
		
		private System.Nullable<bool> _fgActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportTypeChanging(byte value);
    partial void OnReportTypeChanged();
    partial void OnReportGroupIDChanging(string value);
    partial void OnReportGroupIDChanged();
    partial void OnSortNoChanging(int value);
    partial void OnSortNoChanged();
    partial void OnReportNameChanging(string value);
    partial void OnReportNameChanged();
    partial void OnReportPathChanging(string value);
    partial void OnReportPathChanged();
    partial void OnfgActiveChanging(System.Nullable<bool> value);
    partial void OnfgActiveChanged();
    #endregion
		
		public master_ReportListTemplate()
		{
			OnCreated();
		}
		
		[Column(Storage="_ReportType", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ReportType
		{
			get
			{
				return this._ReportType;
			}
			set
			{
				if ((this._ReportType != value))
				{
					this.OnReportTypeChanging(value);
					this.SendPropertyChanging();
					this._ReportType = value;
					this.SendPropertyChanged("ReportType");
					this.OnReportTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ReportGroupID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ReportGroupID
		{
			get
			{
				return this._ReportGroupID;
			}
			set
			{
				if ((this._ReportGroupID != value))
				{
					this.OnReportGroupIDChanging(value);
					this.SendPropertyChanging();
					this._ReportGroupID = value;
					this.SendPropertyChanged("ReportGroupID");
					this.OnReportGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_SortNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SortNo
		{
			get
			{
				return this._SortNo;
			}
			set
			{
				if ((this._SortNo != value))
				{
					this.OnSortNoChanging(value);
					this.SendPropertyChanging();
					this._SortNo = value;
					this.SendPropertyChanged("SortNo");
					this.OnSortNoChanged();
				}
			}
		}
		
		[Column(Storage="_ReportName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ReportName
		{
			get
			{
				return this._ReportName;
			}
			set
			{
				if ((this._ReportName != value))
				{
					this.OnReportNameChanging(value);
					this.SendPropertyChanging();
					this._ReportName = value;
					this.SendPropertyChanged("ReportName");
					this.OnReportNameChanged();
				}
			}
		}
		
		[Column(Storage="_ReportPath", DbType="VarChar(500)")]
		public string ReportPath
		{
			get
			{
				return this._ReportPath;
			}
			set
			{
				if ((this._ReportPath != value))
				{
					this.OnReportPathChanging(value);
					this.SendPropertyChanging();
					this._ReportPath = value;
					this.SendPropertyChanged("ReportPath");
					this.OnReportPathChanged();
				}
			}
		}
		
		[Column(Storage="_fgActive", DbType="Bit")]
		public System.Nullable<bool> fgActive
		{
			get
			{
				return this._fgActive;
			}
			set
			{
				if ((this._fgActive != value))
				{
					this.OnfgActiveChanging(value);
					this.SendPropertyChanging();
					this._fgActive = value;
					this.SendPropertyChanged("fgActive");
					this.OnfgActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[master.Menu]")]
	public partial class master_Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _MenuID;
		
		private string _Text;
		
		private string _Value;
		
		private short _ParentID;
		
		private string _NavigateURL;
		
		private string _ImageURL;
		
		private bool _IsActive;
		
		private string _OnSelectedImageURL;
		
		private string _ModuleID;
		
		private string _MenuIcon;
		
		private int _Priority;
		
		private System.Nullable<bool> _ShowInQuickLaunch;
		
		private System.Nullable<byte> _Indent;
		
		private string _SiteMapURL;
		
		private EntitySet<master_Menu_aspnet_Role> _master_Menu_aspnet_Roles;
		
		private EntityRef<master_PermissionTemplate> _master_PermissionTemplate;
		
		private EntitySet<master_RolePermission> _master_RolePermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuIDChanging(short value);
    partial void OnMenuIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnParentIDChanging(short value);
    partial void OnParentIDChanged();
    partial void OnNavigateURLChanging(string value);
    partial void OnNavigateURLChanged();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnOnSelectedImageURLChanging(string value);
    partial void OnOnSelectedImageURLChanged();
    partial void OnModuleIDChanging(string value);
    partial void OnModuleIDChanged();
    partial void OnMenuIconChanging(string value);
    partial void OnMenuIconChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    partial void OnShowInQuickLaunchChanging(System.Nullable<bool> value);
    partial void OnShowInQuickLaunchChanged();
    partial void OnIndentChanging(System.Nullable<byte> value);
    partial void OnIndentChanged();
    partial void OnSiteMapURLChanging(string value);
    partial void OnSiteMapURLChanged();
    #endregion
		
		public master_Menu()
		{
			this._master_Menu_aspnet_Roles = new EntitySet<master_Menu_aspnet_Role>(new Action<master_Menu_aspnet_Role>(this.attach_master_Menu_aspnet_Roles), new Action<master_Menu_aspnet_Role>(this.detach_master_Menu_aspnet_Roles));
			this._master_PermissionTemplate = default(EntityRef<master_PermissionTemplate>);
			this._master_RolePermissions = new EntitySet<master_RolePermission>(new Action<master_RolePermission>(this.attach_master_RolePermissions), new Action<master_RolePermission>(this.detach_master_RolePermissions));
			OnCreated();
		}
		
		[Column(Storage="_MenuID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="VarChar(30)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(30)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="SmallInt NOT NULL")]
		public short ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_NavigateURL", DbType="VarChar(500)")]
		public string NavigateURL
		{
			get
			{
				return this._NavigateURL;
			}
			set
			{
				if ((this._NavigateURL != value))
				{
					this.OnNavigateURLChanging(value);
					this.SendPropertyChanging();
					this._NavigateURL = value;
					this.SendPropertyChanged("NavigateURL");
					this.OnNavigateURLChanged();
				}
			}
		}
		
		[Column(Storage="_ImageURL", DbType="VarChar(50)")]
		public string ImageURL
		{
			get
			{
				return this._ImageURL;
			}
			set
			{
				if ((this._ImageURL != value))
				{
					this.OnImageURLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL = value;
					this.SendPropertyChanged("ImageURL");
					this.OnImageURLChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_OnSelectedImageURL", DbType="VarChar(50)")]
		public string OnSelectedImageURL
		{
			get
			{
				return this._OnSelectedImageURL;
			}
			set
			{
				if ((this._OnSelectedImageURL != value))
				{
					this.OnOnSelectedImageURLChanging(value);
					this.SendPropertyChanging();
					this._OnSelectedImageURL = value;
					this.SendPropertyChanged("OnSelectedImageURL");
					this.OnOnSelectedImageURLChanged();
				}
			}
		}
		
		[Column(Storage="_ModuleID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string ModuleID
		{
			get
			{
				return this._ModuleID;
			}
			set
			{
				if ((this._ModuleID != value))
				{
					this.OnModuleIDChanging(value);
					this.SendPropertyChanging();
					this._ModuleID = value;
					this.SendPropertyChanged("ModuleID");
					this.OnModuleIDChanged();
				}
			}
		}
		
		[Column(Storage="_MenuIcon", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MenuIcon
		{
			get
			{
				return this._MenuIcon;
			}
			set
			{
				if ((this._MenuIcon != value))
				{
					this.OnMenuIconChanging(value);
					this.SendPropertyChanging();
					this._MenuIcon = value;
					this.SendPropertyChanged("MenuIcon");
					this.OnMenuIconChanged();
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[Column(Storage="_ShowInQuickLaunch", DbType="Bit")]
		public System.Nullable<bool> ShowInQuickLaunch
		{
			get
			{
				return this._ShowInQuickLaunch;
			}
			set
			{
				if ((this._ShowInQuickLaunch != value))
				{
					this.OnShowInQuickLaunchChanging(value);
					this.SendPropertyChanging();
					this._ShowInQuickLaunch = value;
					this.SendPropertyChanged("ShowInQuickLaunch");
					this.OnShowInQuickLaunchChanged();
				}
			}
		}
		
		[Column(Storage="_Indent", DbType="TinyInt")]
		public System.Nullable<byte> Indent
		{
			get
			{
				return this._Indent;
			}
			set
			{
				if ((this._Indent != value))
				{
					this.OnIndentChanging(value);
					this.SendPropertyChanging();
					this._Indent = value;
					this.SendPropertyChanged("Indent");
					this.OnIndentChanged();
				}
			}
		}
		
		[Column(Storage="_SiteMapURL", DbType="VarChar(500)")]
		public string SiteMapURL
		{
			get
			{
				return this._SiteMapURL;
			}
			set
			{
				if ((this._SiteMapURL != value))
				{
					this.OnSiteMapURLChanging(value);
					this.SendPropertyChanging();
					this._SiteMapURL = value;
					this.SendPropertyChanged("SiteMapURL");
					this.OnSiteMapURLChanged();
				}
			}
		}
		
		[Association(Name="master_Menu_master_Menu_aspnet_Role", Storage="_master_Menu_aspnet_Roles", ThisKey="MenuID", OtherKey="MenuID")]
		public EntitySet<master_Menu_aspnet_Role> master_Menu_aspnet_Roles
		{
			get
			{
				return this._master_Menu_aspnet_Roles;
			}
			set
			{
				this._master_Menu_aspnet_Roles.Assign(value);
			}
		}
		
		[Association(Name="master_Menu_master_PermissionTemplate", Storage="_master_PermissionTemplate", ThisKey="MenuID", OtherKey="MenuID", IsUnique=true, IsForeignKey=false)]
		public master_PermissionTemplate master_PermissionTemplate
		{
			get
			{
				return this._master_PermissionTemplate.Entity;
			}
			set
			{
				master_PermissionTemplate previousValue = this._master_PermissionTemplate.Entity;
				if (((previousValue != value) 
							|| (this._master_PermissionTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._master_PermissionTemplate.Entity = null;
						previousValue.master_Menu = null;
					}
					this._master_PermissionTemplate.Entity = value;
					if ((value != null))
					{
						value.master_Menu = this;
					}
					this.SendPropertyChanged("master_PermissionTemplate");
				}
			}
		}
		
		[Association(Name="master_Menu_master_RolePermission", Storage="_master_RolePermissions", ThisKey="MenuID", OtherKey="MenuID")]
		public EntitySet<master_RolePermission> master_RolePermissions
		{
			get
			{
				return this._master_RolePermissions;
			}
			set
			{
				this._master_RolePermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_master_Menu_aspnet_Roles(master_Menu_aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.master_Menu = this;
		}
		
		private void detach_master_Menu_aspnet_Roles(master_Menu_aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.master_Menu = null;
		}
		
		private void attach_master_RolePermissions(master_RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.master_Menu = this;
		}
		
		private void detach_master_RolePermissions(master_RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.master_Menu = null;
		}
	}
	
	[Table(Name="dbo.[master.theme]")]
	public partial class master_theme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ThemeCode;
		
		private string _ThemeName;
		
		private string _BackgroundColorBody;
		
		private string _BackgroundImage;
		
		private string _BackgroundImageBawah;
		
		private string _RowColor;
		
		private string _RowColorAlternate;
		
		private string _RowColorHover;
		
		private string _WelcomeTextColor;
		
		private string _BackgroundColorLogin;
		
		private string _BackgroundImageLogin;
		
		private string _BackgroundImagePanelLogin;
		
		private string _PanelLoginWidth;
		
		private string _PanelLoginHeight;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThemeCodeChanging(string value);
    partial void OnThemeCodeChanged();
    partial void OnThemeNameChanging(string value);
    partial void OnThemeNameChanged();
    partial void OnBackgroundColorBodyChanging(string value);
    partial void OnBackgroundColorBodyChanged();
    partial void OnBackgroundImageChanging(string value);
    partial void OnBackgroundImageChanged();
    partial void OnBackgroundImageBawahChanging(string value);
    partial void OnBackgroundImageBawahChanged();
    partial void OnRowColorChanging(string value);
    partial void OnRowColorChanged();
    partial void OnRowColorAlternateChanging(string value);
    partial void OnRowColorAlternateChanged();
    partial void OnRowColorHoverChanging(string value);
    partial void OnRowColorHoverChanged();
    partial void OnWelcomeTextColorChanging(string value);
    partial void OnWelcomeTextColorChanged();
    partial void OnBackgroundColorLoginChanging(string value);
    partial void OnBackgroundColorLoginChanged();
    partial void OnBackgroundImageLoginChanging(string value);
    partial void OnBackgroundImageLoginChanged();
    partial void OnBackgroundImagePanelLoginChanging(string value);
    partial void OnBackgroundImagePanelLoginChanged();
    partial void OnPanelLoginWidthChanging(string value);
    partial void OnPanelLoginWidthChanged();
    partial void OnPanelLoginHeightChanging(string value);
    partial void OnPanelLoginHeightChanged();
    #endregion
		
		public master_theme()
		{
			OnCreated();
		}
		
		[Column(Storage="_ThemeCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ThemeCode
		{
			get
			{
				return this._ThemeCode;
			}
			set
			{
				if ((this._ThemeCode != value))
				{
					this.OnThemeCodeChanging(value);
					this.SendPropertyChanging();
					this._ThemeCode = value;
					this.SendPropertyChanged("ThemeCode");
					this.OnThemeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ThemeName", DbType="VarChar(50)")]
		public string ThemeName
		{
			get
			{
				return this._ThemeName;
			}
			set
			{
				if ((this._ThemeName != value))
				{
					this.OnThemeNameChanging(value);
					this.SendPropertyChanging();
					this._ThemeName = value;
					this.SendPropertyChanged("ThemeName");
					this.OnThemeNameChanged();
				}
			}
		}
		
		[Column(Storage="_BackgroundColorBody", DbType="VarChar(20)")]
		public string BackgroundColorBody
		{
			get
			{
				return this._BackgroundColorBody;
			}
			set
			{
				if ((this._BackgroundColorBody != value))
				{
					this.OnBackgroundColorBodyChanging(value);
					this.SendPropertyChanging();
					this._BackgroundColorBody = value;
					this.SendPropertyChanged("BackgroundColorBody");
					this.OnBackgroundColorBodyChanged();
				}
			}
		}
		
		[Column(Storage="_BackgroundImage", DbType="VarChar(50)")]
		public string BackgroundImage
		{
			get
			{
				return this._BackgroundImage;
			}
			set
			{
				if ((this._BackgroundImage != value))
				{
					this.OnBackgroundImageChanging(value);
					this.SendPropertyChanging();
					this._BackgroundImage = value;
					this.SendPropertyChanged("BackgroundImage");
					this.OnBackgroundImageChanged();
				}
			}
		}
		
		[Column(Storage="_BackgroundImageBawah", DbType="VarChar(50)")]
		public string BackgroundImageBawah
		{
			get
			{
				return this._BackgroundImageBawah;
			}
			set
			{
				if ((this._BackgroundImageBawah != value))
				{
					this.OnBackgroundImageBawahChanging(value);
					this.SendPropertyChanging();
					this._BackgroundImageBawah = value;
					this.SendPropertyChanged("BackgroundImageBawah");
					this.OnBackgroundImageBawahChanged();
				}
			}
		}
		
		[Column(Storage="_RowColor", DbType="VarChar(20)")]
		public string RowColor
		{
			get
			{
				return this._RowColor;
			}
			set
			{
				if ((this._RowColor != value))
				{
					this.OnRowColorChanging(value);
					this.SendPropertyChanging();
					this._RowColor = value;
					this.SendPropertyChanged("RowColor");
					this.OnRowColorChanged();
				}
			}
		}
		
		[Column(Storage="_RowColorAlternate", DbType="VarChar(20)")]
		public string RowColorAlternate
		{
			get
			{
				return this._RowColorAlternate;
			}
			set
			{
				if ((this._RowColorAlternate != value))
				{
					this.OnRowColorAlternateChanging(value);
					this.SendPropertyChanging();
					this._RowColorAlternate = value;
					this.SendPropertyChanged("RowColorAlternate");
					this.OnRowColorAlternateChanged();
				}
			}
		}
		
		[Column(Storage="_RowColorHover", DbType="VarChar(20)")]
		public string RowColorHover
		{
			get
			{
				return this._RowColorHover;
			}
			set
			{
				if ((this._RowColorHover != value))
				{
					this.OnRowColorHoverChanging(value);
					this.SendPropertyChanging();
					this._RowColorHover = value;
					this.SendPropertyChanged("RowColorHover");
					this.OnRowColorHoverChanged();
				}
			}
		}
		
		[Column(Storage="_WelcomeTextColor", DbType="VarChar(20)")]
		public string WelcomeTextColor
		{
			get
			{
				return this._WelcomeTextColor;
			}
			set
			{
				if ((this._WelcomeTextColor != value))
				{
					this.OnWelcomeTextColorChanging(value);
					this.SendPropertyChanging();
					this._WelcomeTextColor = value;
					this.SendPropertyChanged("WelcomeTextColor");
					this.OnWelcomeTextColorChanged();
				}
			}
		}
		
		[Column(Storage="_BackgroundColorLogin", DbType="VarChar(20)")]
		public string BackgroundColorLogin
		{
			get
			{
				return this._BackgroundColorLogin;
			}
			set
			{
				if ((this._BackgroundColorLogin != value))
				{
					this.OnBackgroundColorLoginChanging(value);
					this.SendPropertyChanging();
					this._BackgroundColorLogin = value;
					this.SendPropertyChanged("BackgroundColorLogin");
					this.OnBackgroundColorLoginChanged();
				}
			}
		}
		
		[Column(Storage="_BackgroundImageLogin", DbType="VarChar(50)")]
		public string BackgroundImageLogin
		{
			get
			{
				return this._BackgroundImageLogin;
			}
			set
			{
				if ((this._BackgroundImageLogin != value))
				{
					this.OnBackgroundImageLoginChanging(value);
					this.SendPropertyChanging();
					this._BackgroundImageLogin = value;
					this.SendPropertyChanged("BackgroundImageLogin");
					this.OnBackgroundImageLoginChanged();
				}
			}
		}
		
		[Column(Storage="_BackgroundImagePanelLogin", DbType="VarChar(50)")]
		public string BackgroundImagePanelLogin
		{
			get
			{
				return this._BackgroundImagePanelLogin;
			}
			set
			{
				if ((this._BackgroundImagePanelLogin != value))
				{
					this.OnBackgroundImagePanelLoginChanging(value);
					this.SendPropertyChanging();
					this._BackgroundImagePanelLogin = value;
					this.SendPropertyChanged("BackgroundImagePanelLogin");
					this.OnBackgroundImagePanelLoginChanged();
				}
			}
		}
		
		[Column(Storage="_PanelLoginWidth", DbType="VarChar(20)")]
		public string PanelLoginWidth
		{
			get
			{
				return this._PanelLoginWidth;
			}
			set
			{
				if ((this._PanelLoginWidth != value))
				{
					this.OnPanelLoginWidthChanging(value);
					this.SendPropertyChanging();
					this._PanelLoginWidth = value;
					this.SendPropertyChanged("PanelLoginWidth");
					this.OnPanelLoginWidthChanged();
				}
			}
		}
		
		[Column(Storage="_PanelLoginHeight", DbType="VarChar(20)")]
		public string PanelLoginHeight
		{
			get
			{
				return this._PanelLoginHeight;
			}
			set
			{
				if ((this._PanelLoginHeight != value))
				{
					this.OnPanelLoginHeightChanging(value);
					this.SendPropertyChanging();
					this._PanelLoginHeight = value;
					this.SendPropertyChanged("PanelLoginHeight");
					this.OnPanelLoginHeightChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[master.Company]")]
	public partial class master_Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CompanyID;
		
		private string _Name;
		
		private string _Logo;
		
		private string _PrimaryAddress;
		
		private string _CompanyTag;
		
		private string _TaxBranchNo;
		
		private System.Nullable<bool> _default;
		
		private EntitySet<master_Company_aspnet_User> _master_Company_aspnet_Users;
		
		private EntitySet<master_UserConnMode> _master_UserConnModes;
		
		private EntitySet<master_Company_master_Database> _master_Company_master_Databases;
		
		private EntitySet<master_Company_aspnet_Role> _master_Company_aspnet_Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(System.Guid value);
    partial void OnCompanyIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    partial void OnPrimaryAddressChanging(string value);
    partial void OnPrimaryAddressChanged();
    partial void OnCompanyTagChanging(string value);
    partial void OnCompanyTagChanged();
    partial void OnTaxBranchNoChanging(string value);
    partial void OnTaxBranchNoChanged();
    partial void OndefaultChanging(System.Nullable<bool> value);
    partial void OndefaultChanged();
    #endregion
		
		public master_Company()
		{
			this._master_Company_aspnet_Users = new EntitySet<master_Company_aspnet_User>(new Action<master_Company_aspnet_User>(this.attach_master_Company_aspnet_Users), new Action<master_Company_aspnet_User>(this.detach_master_Company_aspnet_Users));
			this._master_UserConnModes = new EntitySet<master_UserConnMode>(new Action<master_UserConnMode>(this.attach_master_UserConnModes), new Action<master_UserConnMode>(this.detach_master_UserConnModes));
			this._master_Company_master_Databases = new EntitySet<master_Company_master_Database>(new Action<master_Company_master_Database>(this.attach_master_Company_master_Databases), new Action<master_Company_master_Database>(this.detach_master_Company_master_Databases));
			this._master_Company_aspnet_Roles = new EntitySet<master_Company_aspnet_Role>(new Action<master_Company_aspnet_Role>(this.attach_master_Company_aspnet_Roles), new Action<master_Company_aspnet_Role>(this.detach_master_Company_aspnet_Roles));
			OnCreated();
		}
		
		[Column(Storage="_CompanyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Logo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryAddress", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string PrimaryAddress
		{
			get
			{
				return this._PrimaryAddress;
			}
			set
			{
				if ((this._PrimaryAddress != value))
				{
					this.OnPrimaryAddressChanging(value);
					this.SendPropertyChanging();
					this._PrimaryAddress = value;
					this.SendPropertyChanged("PrimaryAddress");
					this.OnPrimaryAddressChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyTag", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string CompanyTag
		{
			get
			{
				return this._CompanyTag;
			}
			set
			{
				if ((this._CompanyTag != value))
				{
					this.OnCompanyTagChanging(value);
					this.SendPropertyChanging();
					this._CompanyTag = value;
					this.SendPropertyChanged("CompanyTag");
					this.OnCompanyTagChanged();
				}
			}
		}
		
		[Column(Storage="_TaxBranchNo", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string TaxBranchNo
		{
			get
			{
				return this._TaxBranchNo;
			}
			set
			{
				if ((this._TaxBranchNo != value))
				{
					this.OnTaxBranchNoChanging(value);
					this.SendPropertyChanging();
					this._TaxBranchNo = value;
					this.SendPropertyChanged("TaxBranchNo");
					this.OnTaxBranchNoChanged();
				}
			}
		}
		
		[Column(Name="[default]", Storage="_default", DbType="Bit")]
		public System.Nullable<bool> @default
		{
			get
			{
				return this._default;
			}
			set
			{
				if ((this._default != value))
				{
					this.OndefaultChanging(value);
					this.SendPropertyChanging();
					this._default = value;
					this.SendPropertyChanged("@default");
					this.OndefaultChanged();
				}
			}
		}
		
		[Association(Name="master_Company_master_Company_aspnet_User", Storage="_master_Company_aspnet_Users", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<master_Company_aspnet_User> master_Company_aspnet_Users
		{
			get
			{
				return this._master_Company_aspnet_Users;
			}
			set
			{
				this._master_Company_aspnet_Users.Assign(value);
			}
		}
		
		[Association(Name="master_Company_master_UserConnMode", Storage="_master_UserConnModes", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<master_UserConnMode> master_UserConnModes
		{
			get
			{
				return this._master_UserConnModes;
			}
			set
			{
				this._master_UserConnModes.Assign(value);
			}
		}
		
		[Association(Name="master_Company_master_Company_master_Database", Storage="_master_Company_master_Databases", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<master_Company_master_Database> master_Company_master_Databases
		{
			get
			{
				return this._master_Company_master_Databases;
			}
			set
			{
				this._master_Company_master_Databases.Assign(value);
			}
		}
		
		[Association(Name="master_Company_master_Company_aspnet_Role", Storage="_master_Company_aspnet_Roles", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<master_Company_aspnet_Role> master_Company_aspnet_Roles
		{
			get
			{
				return this._master_Company_aspnet_Roles;
			}
			set
			{
				this._master_Company_aspnet_Roles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_master_Company_aspnet_Users(master_Company_aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.master_Company = this;
		}
		
		private void detach_master_Company_aspnet_Users(master_Company_aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.master_Company = null;
		}
		
		private void attach_master_UserConnModes(master_UserConnMode entity)
		{
			this.SendPropertyChanging();
			entity.master_Company = this;
		}
		
		private void detach_master_UserConnModes(master_UserConnMode entity)
		{
			this.SendPropertyChanging();
			entity.master_Company = null;
		}
		
		private void attach_master_Company_master_Databases(master_Company_master_Database entity)
		{
			this.SendPropertyChanging();
			entity.master_Company = this;
		}
		
		private void detach_master_Company_master_Databases(master_Company_master_Database entity)
		{
			this.SendPropertyChanging();
			entity.master_Company = null;
		}
		
		private void attach_master_Company_aspnet_Roles(master_Company_aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.master_Company = this;
		}
		
		private void detach_master_Company_aspnet_Roles(master_Company_aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.master_Company = null;
		}
	}
	
	[Table(Name="dbo.[master.ReportList]")]
	public partial class master_ReportList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ReportType;
		
		private string _ReportGroupID;
		
		private int _SortNo;
		
		private string _ReportName;
		
		private string _ReportPath;
		
		private System.Guid _CompanyID;
		
		private System.Nullable<bool> _fgActive;
		
		private bool _Enabled;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportTypeChanging(byte value);
    partial void OnReportTypeChanged();
    partial void OnReportGroupIDChanging(string value);
    partial void OnReportGroupIDChanged();
    partial void OnSortNoChanging(int value);
    partial void OnSortNoChanged();
    partial void OnReportNameChanging(string value);
    partial void OnReportNameChanged();
    partial void OnReportPathChanging(string value);
    partial void OnReportPathChanged();
    partial void OnCompanyIDChanging(System.Guid value);
    partial void OnCompanyIDChanged();
    partial void OnfgActiveChanging(System.Nullable<bool> value);
    partial void OnfgActiveChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
		
		public master_ReportList()
		{
			OnCreated();
		}
		
		[Column(Storage="_ReportType", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ReportType
		{
			get
			{
				return this._ReportType;
			}
			set
			{
				if ((this._ReportType != value))
				{
					this.OnReportTypeChanging(value);
					this.SendPropertyChanging();
					this._ReportType = value;
					this.SendPropertyChanged("ReportType");
					this.OnReportTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ReportGroupID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ReportGroupID
		{
			get
			{
				return this._ReportGroupID;
			}
			set
			{
				if ((this._ReportGroupID != value))
				{
					this.OnReportGroupIDChanging(value);
					this.SendPropertyChanging();
					this._ReportGroupID = value;
					this.SendPropertyChanged("ReportGroupID");
					this.OnReportGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_SortNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SortNo
		{
			get
			{
				return this._SortNo;
			}
			set
			{
				if ((this._SortNo != value))
				{
					this.OnSortNoChanging(value);
					this.SendPropertyChanging();
					this._SortNo = value;
					this.SendPropertyChanged("SortNo");
					this.OnSortNoChanged();
				}
			}
		}
		
		[Column(Storage="_ReportName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ReportName
		{
			get
			{
				return this._ReportName;
			}
			set
			{
				if ((this._ReportName != value))
				{
					this.OnReportNameChanging(value);
					this.SendPropertyChanging();
					this._ReportName = value;
					this.SendPropertyChanged("ReportName");
					this.OnReportNameChanged();
				}
			}
		}
		
		[Column(Storage="_ReportPath", DbType="VarChar(500)")]
		public string ReportPath
		{
			get
			{
				return this._ReportPath;
			}
			set
			{
				if ((this._ReportPath != value))
				{
					this.OnReportPathChanging(value);
					this.SendPropertyChanging();
					this._ReportPath = value;
					this.SendPropertyChanged("ReportPath");
					this.OnReportPathChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_fgActive", DbType="Bit")]
		public System.Nullable<bool> fgActive
		{
			get
			{
				return this._fgActive;
			}
			set
			{
				if ((this._fgActive != value))
				{
					this.OnfgActiveChanging(value);
					this.SendPropertyChanging();
					this._fgActive = value;
					this.SendPropertyChanged("fgActive");
					this.OnfgActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsDbConsolidationList")]
	public partial class MsDbConsolidationList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ConsolidationID;
		
		private System.Guid _DatabaseID;
		
		private System.Nullable<System.Guid> _CompanyID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConsolidationIDChanging(string value);
    partial void OnConsolidationIDChanged();
    partial void OnDatabaseIDChanging(System.Guid value);
    partial void OnDatabaseIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnCompanyIDChanged();
    #endregion
		
		public MsDbConsolidationList()
		{
			OnCreated();
		}
		
		[Column(Storage="_ConsolidationID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ConsolidationID
		{
			get
			{
				return this._ConsolidationID;
			}
			set
			{
				if ((this._ConsolidationID != value))
				{
					this.OnConsolidationIDChanging(value);
					this.SendPropertyChanging();
					this._ConsolidationID = value;
					this.SendPropertyChanged("ConsolidationID");
					this.OnConsolidationIDChanged();
				}
			}
		}
		
		[Column(Storage="_DatabaseID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DatabaseID
		{
			get
			{
				return this._DatabaseID;
			}
			set
			{
				if ((this._DatabaseID != value))
				{
					this.OnDatabaseIDChanging(value);
					this.SendPropertyChanging();
					this._DatabaseID = value;
					this.SendPropertyChanged("DatabaseID");
					this.OnDatabaseIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsLinkServer")]
	public partial class MsLinkServer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Server_IP;
		
		private string _Server_Name;
		
		private string _Server_Instance;
		
		private string _Server_Database;
		
		private string _Server_RemoteUser;
		
		private string _Server_RemotePass;
		
		private string _Server_Location;
		
		private System.Nullable<char> _Server_HO;
		
		private System.Nullable<char> _FgActive;
		
		private string _Remark;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnServer_IPChanging(string value);
    partial void OnServer_IPChanged();
    partial void OnServer_NameChanging(string value);
    partial void OnServer_NameChanged();
    partial void OnServer_InstanceChanging(string value);
    partial void OnServer_InstanceChanged();
    partial void OnServer_DatabaseChanging(string value);
    partial void OnServer_DatabaseChanged();
    partial void OnServer_RemoteUserChanging(string value);
    partial void OnServer_RemoteUserChanged();
    partial void OnServer_RemotePassChanging(string value);
    partial void OnServer_RemotePassChanged();
    partial void OnServer_LocationChanging(string value);
    partial void OnServer_LocationChanged();
    partial void OnServer_HOChanging(System.Nullable<char> value);
    partial void OnServer_HOChanged();
    partial void OnFgActiveChanging(System.Nullable<char> value);
    partial void OnFgActiveChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public MsLinkServer()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Server_IP", DbType="VarChar(50)")]
		public string Server_IP
		{
			get
			{
				return this._Server_IP;
			}
			set
			{
				if ((this._Server_IP != value))
				{
					this.OnServer_IPChanging(value);
					this.SendPropertyChanging();
					this._Server_IP = value;
					this.SendPropertyChanged("Server_IP");
					this.OnServer_IPChanged();
				}
			}
		}
		
		[Column(Storage="_Server_Name", DbType="VarChar(50)")]
		public string Server_Name
		{
			get
			{
				return this._Server_Name;
			}
			set
			{
				if ((this._Server_Name != value))
				{
					this.OnServer_NameChanging(value);
					this.SendPropertyChanging();
					this._Server_Name = value;
					this.SendPropertyChanged("Server_Name");
					this.OnServer_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Server_Instance", DbType="VarChar(50)")]
		public string Server_Instance
		{
			get
			{
				return this._Server_Instance;
			}
			set
			{
				if ((this._Server_Instance != value))
				{
					this.OnServer_InstanceChanging(value);
					this.SendPropertyChanging();
					this._Server_Instance = value;
					this.SendPropertyChanged("Server_Instance");
					this.OnServer_InstanceChanged();
				}
			}
		}
		
		[Column(Storage="_Server_Database", DbType="VarChar(50)")]
		public string Server_Database
		{
			get
			{
				return this._Server_Database;
			}
			set
			{
				if ((this._Server_Database != value))
				{
					this.OnServer_DatabaseChanging(value);
					this.SendPropertyChanging();
					this._Server_Database = value;
					this.SendPropertyChanged("Server_Database");
					this.OnServer_DatabaseChanged();
				}
			}
		}
		
		[Column(Storage="_Server_RemoteUser", DbType="VarChar(50)")]
		public string Server_RemoteUser
		{
			get
			{
				return this._Server_RemoteUser;
			}
			set
			{
				if ((this._Server_RemoteUser != value))
				{
					this.OnServer_RemoteUserChanging(value);
					this.SendPropertyChanging();
					this._Server_RemoteUser = value;
					this.SendPropertyChanged("Server_RemoteUser");
					this.OnServer_RemoteUserChanged();
				}
			}
		}
		
		[Column(Storage="_Server_RemotePass", DbType="VarChar(50)")]
		public string Server_RemotePass
		{
			get
			{
				return this._Server_RemotePass;
			}
			set
			{
				if ((this._Server_RemotePass != value))
				{
					this.OnServer_RemotePassChanging(value);
					this.SendPropertyChanging();
					this._Server_RemotePass = value;
					this.SendPropertyChanged("Server_RemotePass");
					this.OnServer_RemotePassChanged();
				}
			}
		}
		
		[Column(Storage="_Server_Location", DbType="VarChar(500)")]
		public string Server_Location
		{
			get
			{
				return this._Server_Location;
			}
			set
			{
				if ((this._Server_Location != value))
				{
					this.OnServer_LocationChanging(value);
					this.SendPropertyChanging();
					this._Server_Location = value;
					this.SendPropertyChanged("Server_Location");
					this.OnServer_LocationChanged();
				}
			}
		}
		
		[Column(Storage="_Server_HO", DbType="VarChar(1)")]
		public System.Nullable<char> Server_HO
		{
			get
			{
				return this._Server_HO;
			}
			set
			{
				if ((this._Server_HO != value))
				{
					this.OnServer_HOChanging(value);
					this.SendPropertyChanging();
					this._Server_HO = value;
					this.SendPropertyChanged("Server_HO");
					this.OnServer_HOChanged();
				}
			}
		}
		
		[Column(Storage="_FgActive", DbType="VarChar(1)")]
		public System.Nullable<char> FgActive
		{
			get
			{
				return this._FgActive;
			}
			set
			{
				if ((this._FgActive != value))
				{
					this.OnFgActiveChanging(value);
					this.SendPropertyChanging();
					this._FgActive = value;
					this.SendPropertyChanged("FgActive");
					this.OnFgActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(500)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="VarChar(50)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="VarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MsTableSync")]
	public partial class MsTableSync : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Table_Group;
		
		private string _Table_Name;
		
		private string _Table_PrimaryKey;
		
		private System.Nullable<char> _FgActive;
		
		private string _Remark;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTable_GroupChanging(string value);
    partial void OnTable_GroupChanged();
    partial void OnTable_NameChanging(string value);
    partial void OnTable_NameChanged();
    partial void OnTable_PrimaryKeyChanging(string value);
    partial void OnTable_PrimaryKeyChanged();
    partial void OnFgActiveChanging(System.Nullable<char> value);
    partial void OnFgActiveChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public MsTableSync()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Table_Group", DbType="VarChar(50)")]
		public string Table_Group
		{
			get
			{
				return this._Table_Group;
			}
			set
			{
				if ((this._Table_Group != value))
				{
					this.OnTable_GroupChanging(value);
					this.SendPropertyChanging();
					this._Table_Group = value;
					this.SendPropertyChanged("Table_Group");
					this.OnTable_GroupChanged();
				}
			}
		}
		
		[Column(Storage="_Table_Name", DbType="VarChar(50)")]
		public string Table_Name
		{
			get
			{
				return this._Table_Name;
			}
			set
			{
				if ((this._Table_Name != value))
				{
					this.OnTable_NameChanging(value);
					this.SendPropertyChanging();
					this._Table_Name = value;
					this.SendPropertyChanged("Table_Name");
					this.OnTable_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Table_PrimaryKey", DbType="VarChar(50)")]
		public string Table_PrimaryKey
		{
			get
			{
				return this._Table_PrimaryKey;
			}
			set
			{
				if ((this._Table_PrimaryKey != value))
				{
					this.OnTable_PrimaryKeyChanging(value);
					this.SendPropertyChanging();
					this._Table_PrimaryKey = value;
					this.SendPropertyChanged("Table_PrimaryKey");
					this.OnTable_PrimaryKeyChanged();
				}
			}
		}
		
		[Column(Storage="_FgActive", DbType="VarChar(1)")]
		public System.Nullable<char> FgActive
		{
			get
			{
				return this._FgActive;
			}
			set
			{
				if ((this._FgActive != value))
				{
					this.OnFgActiveChanging(value);
					this.SendPropertyChanging();
					this._FgActive = value;
					this.SendPropertyChanged("FgActive");
					this.OnFgActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(500)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="VarChar(50)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="VarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
